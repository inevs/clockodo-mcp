openapi: 3.0.0
info:
  title: 'Clockodo API Documentation'
  description: "# Clockodo REST API\n\nOur API opens Clockodo for other systems. Billing and project management applications or custom shell scripts, for example, are useful mash-ups with Clockodo.\n\nAs a REST API, the interface allows you to query and modify Clockodo data and control the clock via HTTP in JSON format.\n\n## Legacy API Documentation\n\nIf you're still using an earlier version of any of our API endpoints, you can find the corresponding documentation here: [Clockodo Legacy API Documentation](https://www.clockodo.com/api/)\n\nPlease note that this documentation is no longer actively updated. For new projects, we recommend migrating to the latest API endpoints documented here to benefit from improved features and ongoing support.\n\n## URL of the Clockodo API\n\nYou can access our API via the following URL:\n\n```text\nhttps://my.clockodo.com/api/[resource type]\n```\n\nThe resource type represents a class of your data.\n\nOnce you request a specific resource, for example, query information about exactly one entity, you can use the following URL:\n\n```text\nhttps://my.clockodo.com/api/[resource type]/[resource ID]\n```\n\nIn the following sections of this documentation, you will find more detailed descriptions of the available endpoints for each resource type. For example, under [Entry](./#tag/Entry) you will find detailed information on how you can manage time entries in your Clockodo environment.\n\n## HTTP Verbs\n\nTo tell the API which operations you want to perform on the resources, the so-called verbs of the HTTP protocol are used. The following operations are usually possible:\n\n| HTTP Verb                              | Description                                                                                      |\n|----------------------------------------|--------------------------------------------------------------------------------------------------|\n| `GET`                                  | Query a list of all the resources of the selected resource type                                  |\n| `GET` (with resource ID)               | Query exactly one resource                                                                       |\n| `POST`                                 | Create a new resource                                                                            |\n| `PUT` (with resource ID)               | Update or edit a resource                                                                        |\n| `DELETE`                               | Delete a resource (for most resources, the Clockodo API does not delete it finally, but disables it) |\n\n## Authentication\n\nEach Clockodo user has his personal API access, which takes into account the user's access rights. You can find your API key under the menu item \"Personal data\" in your Clockodo account.\n\nTo gain access to your data via the API, you must authenticate yourself to the API using the API key. There are two different ways to do this:\n\n**Via the following HTTP headers:**\n```http\nX-ClockodoApiUser: [email address]\nX-ClockodoApiKey: [API key]\n```\n\n**Or using the basic authentication of the HTTP protocol:**\n```http\nUser: [email address]\nPassword: [API key]\n```\n\n## Client identification\n\nEach request to our API must contain an identification of the calling application, including the email address of a technical contact person. For this, the following HTTP header must be used:\n\n```http\nX-Clockodo-External-Application: [name of application or company];[email address]\n```\n\n**Example:**\n```http\nX-Clockodo-External-Application: Clockodo;admin@clockodo.com\n```\n\n## Localization: Language & formats\n\nSome response values of the API are localized. For example, texts describing dates, error messages, etc.  \nIn order to switch between available languages (`en`, `de`, `fr`), use the following HTTP header:\n\n```http\nAccept-Language: en\n```\n\n## Response codes\n\nThe API responds to requests with the status codes of the HTTP protocol. In the event of errors, you will also find additional error information in the response.\n\n| Status Code | Meaning                                                                                   |\n|-------------|-------------------------------------------------------------------------------------------|\n| `200`       | OK – The request was successful                                                           |\n| `400`       | Bad Request – The request was defective (e.g. missing parameter)                          |\n| `401`       | Unauthorized – Authentication failed                                                      |\n| `403`       | Forbidden – Insufficient access rights for the requested resource                         |\n| `404`       | Not Found – The requested resource was not found                                          |\n| `405`       | Method Not Allowed – The requested endpoint cannot be used                                |\n| `409`       | Conflict – A resource with the data already exists                                        |\n| `422`       | Unprocessable Entity - The server understands the content type but cannot process the instructions (validation or semantic errors) |\n| `429`       | Too Many Requests – Too many requests to an endpoint in a certain period of time          |\n| `500`       | Internal Server Error – An unknown error occurred                                         |\n\n## Page-by-page output\n\nCertain resources such as [entries](./#tag/Entry), [customers](./#tag/Customer) and [projects](./#tag/Project) can return a lot of data. Therefore, a “page-by-page output” is active for these resources, meaning the number of elements returned per call is limited.\n\nYou can use the additional request parameter `page` to access further elements.\n\n```http\npage=[integer]\n```\n\n**Additional content of the response:**\n```json\n\"paging\": {\n  \"items_per_page\": [integer],\n  \"current_page\": [integer],\n  \"count_pages\": [integer],\n  \"count_items\": [integer]\n}\n```\n\n## Example calls\n\n**Example: Retrieve all services with cURL using basic authentication:**\n```bash\ncurl -v \\\n  -X GET \\\n  -u [email address]:[API key] \\\n  -H 'X-Clockodo-External-Application: [name of application];[email address]' \\\n  'https://my.clockodo.com/api/v4/services'\n```\n\n**Example: Retrieve all services with cURL using authentication via the HTTP header:**\n```bash\ncurl -v \\\n  -X GET \\\n  -H 'X-ClockodoApiUser: [email address]' \\\n  -H 'X-ClockodoApiKey: [API key]' \\\n  -H 'X-Clockodo-External-Application: [name of application];[email address]' \\\n  'https://my.clockodo.com/api/v4/services'\n```\n\n**Example: Create a service:**\n```bash\ncurl -v \\\n  -X POST \\\n  -H 'X-ClockodoApiUser: [email address]' \\\n  -H 'X-ClockodoApiKey: [API key]' \\\n  -H 'X-Clockodo-External-Application: [name of application];[email address]' \\\n  --data \"name=Test Service\" \\\n  'https://my.clockodo.com/api/v4/services'\n```\n\n# Clockodo Webhooks\n\nWebhooks make it possible to react to events in Clockodo in real time. When a defined event occurs, our system automatically sends an HTTP POST request to a URL you specify.  \nThis allows you to trigger your own workflows or automate and synchronize external systems.\n\n## Supported Webhook Events\n\n| Entity                  | Event Types                                                                                      |\n|-------------------------|--------------------------------------------------------------------------------------------------|\n| **User**                | • user.created <br> • user.updated <br> • user.deleted                                           |\n| **Absence**             | • absence.created <br> • absence.updated <br> • absence.deleted <br> • absence.approved          |\n| **Customer**            | • customer.created <br> • customer.updated <br> • customer.deleted                               |\n| **Project**             | • project.created <br> • project.updated <br> • project.deleted <br> • project.completed         |\n| **Subproject**          | • subproject.created <br> • subproject.updated <br> • subproject.deleted                         |\n| **Service**             | • service.created <br> • service.updated <br> • service.deleted                                  |\n| **Team**                | • team.created <br> • team.updated <br> • team.deleted                                           |\n| **Lump Sum Service**    | • lump_sum_service.created <br> • lump_sum_service.updated <br> • lump_sum_service.deleted       |\n| **Holidays Carry**      | • holidays_carry.created <br> • holidays_carry.updated <br> • holidays_carry.deleted             |\n| **Holidays Quota**      | • holidays_quota.created <br> • holidays_quota.updated <br> • holidays_quota.deleted             |\n| **Overtime Carry**      | • overtime_carry.created <br> • overtime_carry.updated <br> • overtime_carry.deleted             |\n| **Nonbusiness Group**   | • nonbusiness_group.created <br> • nonbusiness_group.updated <br> • nonbusiness_group.deleted     |\n| **Work Time Change Request** | • work_time_change_request.created <br> • work_time_change_request.updated <br> • work_time_change_request.deleted |\n| **Entry**               | • entry.created <br> • entry.updated <br> • entry.deleted <br> • entry.started <br> • entry.stopped |\n\n## Creating and Editing a Webhook\n\nYou can create a new webhook or edit an existing one via the *Webhooks* section in the Clockodo menu.  \nSimply select the desired event (see table above), enter the target URL and a token.\n\n### Webhook Validation\n\nA webhook must be validated when it is initially created or its URL is changed.  \nThis is as a security measure and ensures that you control the specified target URL.\n\nTo validate the webhook, Clockodo sends a POST request to the URL you provided with the following payload:\n\n```json\n{\n  \"secret\": \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n}\n```\n\nEnter the received secret into the corresponding input field in Clockodo.\n\n## Webhook Payload\n\nEach webhook call is sent as an HTTP POST request in JSON format to the configured URL. The general structure is as follows:\n\n```json\n{\n  \"subscription_id\": 42,\n  \"company_id\": 1337,\n  \"occurred_at\": \"1986-05-10T17:02:00Z\",\n  \"payload\": {\n    \"team\": {\n      \"id\": 9001\n    }\n  },\n  \"event_name\": \"team.updated\",\n  \"token\": \"My_Sup3r_T0k3n\"\n}\n```\n\n- `subscription_id`  \n  Unique ID of the webhook subscription\n\n- `company_id`  \n  ID of your company in Clockodo\n\n- `occurred_at`  \n  Timestamp of the event (ISO 8601, UTC)\n\n- `event_name`  \n  Type of the triggered event\n\n- `payload`  \n  Contains the affected entity and its ID\n\n- `token`  \n  The token you defined when setting up the webhook (used to authenticate incoming requests)\n\nWe only transmit the ID of the created, modified, or deleted entity. **We don't transmit full datasets or deltas**.\n\nThis approach has several advantages:\n\n- **Data security**  \n  No sensitive or extensive data is transmitted unnecessarily.\n\n- **Actuality of the data**  \n  After receiving a webhook event, you can **retrieve the current and complete data** via API.  \n  This prevents inconsistencies that could arise due to parallel changes or delays.\n\n- **Reduced risk of errors**  \n  For complex or rapidly changing data structures, querying the current state is often more reliable than processing potentially outdated snapshots.\n\n- **Flexibility**  \n  Your system can decide when and to what extent it needs additional information.\n\n## Best Practices and Recommendations\n\n- **Event validation**  \n  Always verify the token and structure of incoming webhook data.\n\n- **Idempotency**  \n  Ensure your systems can correctly handle duplicate or repeated events.\n\n- **Logging**  \n  Log incoming webhook calls for debugging and traceability purposes.\n"
  termsOfService: 'https://www.clockodo.com/en/terms-and-conditions/'
  contact:
    name: 'Clockodo support'
    url: 'https://www.clockodo.com/en/about-us/'
    email: support@clockodo.com
  version: '2025-09-18'
  x-logo:
    url: /clockodo-logo.svg
    altText: 'Clockodo Logo'
    backgroundColor: '#3d2a5a'
servers:
  -
    url: 'https://my.clockodo.com/api'
paths:
  /register:
    post:
      tags:
        - Register
      operationId: createRegister
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - companies_name
                - name
                - email
              properties:
                companies_name:
                  type: string
                  maxLength: 100
                  nullable: false
                name:
                  type: string
                  maxLength: 100
                  nullable: false
                email:
                  type: string
                  format: email
                  nullable: false
                rfs:
                  description: 'Name of the external application from which the registration is made'
                  type: string
                  nullable: true
                bs:
                  description: 'Preselected billing application'
                  type: string
                  nullable: true
                gtc_agreed:
                  description: 'Terms of Clockodo were accepted'
                  type: string
                  nullable: true
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterV1'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  /targethours:
    get:
      tags:
        - TargetHour
      operationId: getTargethours
      parameters:
        -
          name: users_id
          in: query
          required: false
          schema:
            type: array
            items:
              type: integer
              maximum: 500
              nullable: false
            nullable: false
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - targethours
                properties:
                  targethours: { type: array, items: { $ref: '#/components/schemas/TargetHourV1' } }
                type: object
      deprecated: false
    post:
      tags:
        - TargetHour
      operationId: createTargethour
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - users_id
                - type
                - date_since
                - date_until
                - compensation_monthly
              properties:
                users_id:
                  type: integer
                  minimum: 1
                  nullable: false
                type:
                  $ref: '#/components/schemas/TargetHourType'
                date_since:
                  type: string
                  format: date
                  example: '2023-02-28'
                  nullable: false
                date_until:
                  type: string
                  format: date
                  example: '2023-02-28'
                  nullable: true
                monday:
                  type: number
                  format: float
                  maximum: 24
                  minimum: 0
                  nullable: false
                tuesday:
                  type: number
                  format: float
                  maximum: 24
                  minimum: 0
                  nullable: false
                wednesday:
                  type: number
                  format: float
                  maximum: 24
                  minimum: 0
                  nullable: false
                thursday:
                  type: number
                  format: float
                  maximum: 24
                  minimum: 0
                  nullable: false
                friday:
                  type: number
                  format: float
                  maximum: 24
                  minimum: 0
                  nullable: false
                saturday:
                  type: number
                  format: float
                  maximum: 24
                  minimum: 0
                  nullable: false
                sunday:
                  type: number
                  format: float
                  maximum: 24
                  minimum: 0
                  nullable: false
                monthly_target:
                  type: number
                  format: float
                  maximum: 744
                  minimum: 0
                  nullable: false
                workday_monday:
                  type: boolean
                  nullable: false
                workday_tuesday:
                  type: boolean
                  nullable: false
                workday_wednesday:
                  type: boolean
                  nullable: false
                workday_thursday:
                  type: boolean
                  nullable: false
                workday_friday:
                  type: boolean
                  nullable: false
                workday_saturday:
                  type: boolean
                  nullable: false
                workday_sunday:
                  type: boolean
                  nullable: false
                compensation_daily:
                  description: 'Automatic time compensation per day in minutes'
                  type: number
                  maximum: 1440
                  minimum: 0
                  nullable: false
                compensation_monthly:
                  description: 'Compensation for monthly target hours in minutes'
                  type: number
                  maximum: 744
                  minimum: 0
                  nullable: false
                holiday_fixed_credit:
                  type: number
                  enum: [0, 1]
                  nullable: false
                surcharge_models_id:
                  type: integer
                  minimum: 1
                  nullable: false
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - targethoursRow
                properties:
                  targethoursRow: { $ref: '#/components/schemas/TargetHourV1' }
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  '/targethours/{id}':
    get:
      tags:
        - TargetHour
      operationId: getTargethourById
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - targethoursRow
                properties:
                  targethoursRow: { $ref: '#/components/schemas/TargetHourV1' }
                type: object
      deprecated: false
    put:
      tags:
        - TargetHour
      operationId: updateTargethourById
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - type
                - date_since
              properties:
                type:
                  $ref: '#/components/schemas/TargetHourType'
                date_since:
                  type: string
                  format: date
                  example: '2023-02-28'
                  nullable: false
                date_until:
                  type: string
                  format: date
                  example: '2023-02-28'
                  nullable: true
                monday:
                  type: number
                  format: float
                  maximum: 24
                  minimum: 0
                  nullable: false
                tuesday:
                  type: number
                  format: float
                  maximum: 24
                  minimum: 0
                  nullable: false
                wednesday:
                  type: number
                  format: float
                  maximum: 24
                  minimum: 0
                  nullable: false
                thursday:
                  type: number
                  format: float
                  maximum: 24
                  minimum: 0
                  nullable: false
                friday:
                  type: number
                  format: float
                  maximum: 24
                  minimum: 0
                  nullable: false
                saturday:
                  type: number
                  format: float
                  maximum: 24
                  minimum: 0
                  nullable: false
                sunday:
                  type: number
                  format: float
                  maximum: 24
                  minimum: 0
                  nullable: false
                monthly_target:
                  type: number
                  format: float
                  maximum: 744
                  minimum: 0
                  nullable: false
                workday_monday:
                  type: boolean
                  nullable: false
                workday_tuesday:
                  type: boolean
                  nullable: false
                workday_wednesday:
                  type: boolean
                  nullable: false
                workday_thursday:
                  type: boolean
                  nullable: false
                workday_friday:
                  type: boolean
                  nullable: false
                workday_saturday:
                  type: boolean
                  nullable: false
                workday_sunday:
                  type: boolean
                  nullable: false
                compensation_daily:
                  description: 'Compensation for daily target hours in minutes'
                  type: number
                  maximum: 1440
                  minimum: 0
                  nullable: false
                compensation_monthly:
                  description: 'Compensation for monthly target hours in minutes'
                  type: number
                  maximum: 744
                  minimum: 0
                  nullable: false
                holiday_fixed_credit:
                  type: number
                  enum: [0, 1]
                  nullable: false
                surcharge_models_id:
                  type: integer
                  nullable: false
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - targethoursRow
                properties:
                  targethoursRow: { $ref: '#/components/schemas/TargetHourV1' }
                type: object
      deprecated: false
    delete:
      tags:
        - TargetHour
      operationId: deleteTargethourById
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - success
                properties:
                  success: { title: Success, type: boolean, example: true }
                type: object
      deprecated: false
  /userreports:
    get:
      tags:
        - UserReport
      operationId: getUserreports
      parameters:
        -
          name: year
          in: query
          required: true
          schema:
            type: integer
            maximum: 2026
            minimum: 1910
            nullable: false
        -
          name: type
          in: query
          description: "Possible values:\n- `0`: Only for year (default)\n- `1`: For year and months\n- `2`: For year, months and weeks\n- `3`: For year, months, weeks and days\n- `4`: For year, months, weeks and days; including start and end times and breaks"
          required: false
          schema:
            $ref: '#/components/schemas/UserReportType'
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - userreports
                properties:
                  userreports: { type: array, items: { $ref: '#/components/schemas/UserReportV1' } }
                type: object
      deprecated: false
  '/userreports/{id}':
    get:
      tags:
        - UserReport
      operationId: getUserreportById
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
        -
          name: year
          in: query
          required: true
          schema:
            type: integer
            maximum: 2026
            minimum: 1910
            nullable: false
        -
          name: type
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/UserReportType'
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - userreport
                properties:
                  userreport: { $ref: '#/components/schemas/UserReportV1' }
                type: object
      deprecated: false
  /v2/accessGroups:
    get:
      tags:
        - AccessGroup
      operationId: getAccessGroupsV2
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/AccessGroupV2' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    post:
      tags:
        - AccessGroup
      operationId: createAccessGroupV2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - name
              properties:
                name:
                  type: string
                  maxLength: 100
                  nullable: false
                users_ids:
                  description: 'IDs of the access group members'
                  type: array
                  items: {  }
                  maxItems: 500
                  minItems: 0
                  nullable: false
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/AccessGroupV2' }
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiAccessGroupsV2Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  '/v2/accessGroups/{accessGroupsId}/customers':
    put:
      tags:
        - AccessGroupAccess
      operationId: updateAccessGroupsCustomerByAccessGroupsIdV2
      parameters:
        -
          name: accessGroupsId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - id
                - type
                - value
              properties:
                id:
                  type: integer
                  minimum: 1
                  nullable: false
                type:
                  $ref: '#/components/schemas/AccessType'
                value:
                  $ref: '#/components/schemas/AccessValue'
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_projects_access_v2'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  '/v2/accessGroups/{accessGroupsId}/customers/general':
    put:
      tags:
        - AccessGroupAccess
      operationId: updateAccessGroupsCustomersGeneralByAccessGroupsIdV2
      parameters:
        -
          name: accessGroupsId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - type
                - value
              properties:
                type:
                  $ref: '#/components/schemas/AccessType'
                value:
                  $ref: '#/components/schemas/AccessValue'
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_projects_access_v2'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiAccessGroupsCustomersGeneralV2Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  '/v2/accessGroups/{accessGroupsId}/customersProjects':
    get:
      tags:
        - AccessGroupAccess
      operationId: getAccessGroupsCustomersProjectByAccessGroupsIdV2
      parameters:
        -
          name: accessGroupsId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_projects_access_v2'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  '/v2/accessGroups/{accessGroupsId}/projects':
    put:
      tags:
        - AccessGroupAccess
      operationId: updateAccessGroupsProjectByAccessGroupsIdV2
      parameters:
        -
          name: accessGroupsId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - id
                - type
                - value
              properties:
                id:
                  type: integer
                  minimum: 1
                  nullable: false
                type:
                  $ref: '#/components/schemas/AccessType'
                value:
                  $ref: '#/components/schemas/ApiAccessGroupsProjectsV2_AccessValueForPut'
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_projects_access_v2'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  '/v2/accessGroups/{accessGroupsId}/services':
    get:
      tags:
        - AccessGroupAccess
      operationId: getAccessGroupsServiceByAccessGroupsIdV2
      parameters:
        -
          name: accessGroupsId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/services_access_v2'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    put:
      tags:
        - AccessGroupAccess
      operationId: updateAccessGroupsServiceByAccessGroupsIdV2
      parameters:
        -
          name: accessGroupsId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - id
                - type
                - value
              properties:
                id:
                  type: integer
                  minimum: 1
                  nullable: false
                type:
                  $ref: '#/components/schemas/ApiAccessGroupsServicesV2_AccessTypeForPut'
                value:
                  $ref: '#/components/schemas/ApiAccessGroupsServicesV2_AccessValueForPut'
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/services_access_v2'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  '/v2/accessGroups/{accessGroupsId}/services/general':
    put:
      tags:
        - AccessGroupAccess
      operationId: updateAccessGroupsServicesGeneralByAccessGroupsIdV2
      parameters:
        -
          name: accessGroupsId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - type
                - value
              properties:
                type:
                  $ref: '#/components/schemas/ApiAccessGroupsServicesGeneralV2_AccessTypeForPut'
                value:
                  $ref: '#/components/schemas/AccessValue'
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/services_access_v2'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiAccessGroupsServicesGeneralV2Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  '/v2/accessGroups/{id}':
    get:
      tags:
        - AccessGroup
      operationId: getAccessGroupByIdV2
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/AccessGroupV2' }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    put:
      tags:
        - AccessGroup
      operationId: updateAccessGroupByIdV2
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  maxLength: 100
                  nullable: false
                users_ids:
                  description: 'IDs of the access group members'
                  type: array
                  items: {  }
                  maxItems: 500
                  minItems: 0
                  nullable: false
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/AccessGroupV2' }
                type: object
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiAccessGroupsV2Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    delete:
      tags:
        - AccessGroup
      operationId: deleteAccessGroupByIdV2
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - success
                properties:
                  success: { title: Success, type: boolean, example: true }
                type: object
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiAccessGroupsV2Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  /v2/aggregates/users/me:
    get:
      tags:
        - AggregatesUsersMe
      operationId: getAggregatesUsersMeV2
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AggregatesUsersMeV2'
      deprecated: true
  /v2/clock:
    get:
      tags:
        - Clock
      summary: 'Get currently running entry'
      operationId: getClockV2
      parameters:
        -
          name: users_id
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            nullable: false
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClockV2'
      deprecated: false
    post:
      tags:
        - Clock
      summary: 'Start clock'
      operationId: createClockV2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - customers_id
                - services_id
              properties:
                customers_id:
                  type: integer
                  minimum: 1
                  nullable: false
                services_id:
                  type: integer
                  minimum: 1
                  nullable: false
                billable:
                  oneOf: [{ $ref: '#/components/schemas/Billable' }]
                  nullable: true
                  type: integer
                duration_transfer:
                  type: integer
                  minimum: 0
                  nullable: true
                projects_id:
                  type: integer
                  minimum: 0
                  nullable: true
                subprojects_id:
                  type: integer
                  minimum: 0
                  nullable: true
                text:
                  type: string
                  maxLength: 1000
                  nullable: true
                time_since:
                  type: string
                  format: date-time
                  example: '2023-02-28T12:00:00Z'
                  nullable: true
                users_id:
                  type: integer
                  minimum: 1
                  nullable: true
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClockStartStopV2'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  '/v2/clock/{id}':
    put:
      tags:
        - Clock
      summary: 'Change duration'
      operationId: updateClockByIdV2
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                time_since:
                  type: string
                  format: date-time
                  example: '2023-02-28T12:00:00Z'
                  nullable: true
                time_since_before:
                  type: string
                  format: date-time
                  example: '2023-02-28T12:00:00Z'
                  nullable: true
                time_until_before:
                  type: string
                  format: date-time
                  example: '2023-02-28T12:00:00Z'
                  nullable: true
                duration:
                  type: integer
                  minimum: 0
                  nullable: true
                duration_before:
                  type: integer
                  minimum: 0
                  nullable: true
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClockDurationV2'
      deprecated: false
    delete:
      tags:
        - Clock
      summary: 'Stop clock'
      operationId: deleteClockByIdV2
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
        -
          name: away
          in: query
          required: false
          schema:
            type: integer
            minimum: 0
            nullable: true
        -
          name: time_until
          in: query
          required: false
          schema:
            type: string
            format: date-time
            example: '2023-02-28T12:00:00Z'
            nullable: true
        -
          name: users_id
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            nullable: true
        -
          name: start_new
          in: query
          required: false
          schema:
            type: boolean
            nullable: true
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClockStartStopV2'
      deprecated: false
  /v2/entries:
    get:
      tags:
        - Entry
      operationId: getEntriesV2
      parameters:
        -
          name: time_since
          in: query
          required: true
          schema:
            type: string
            format: date-time
            example: '2023-02-28T12:00:00Z'
            nullable: false
        -
          name: time_until
          in: query
          required: true
          schema:
            type: string
            format: date-time
            example: '2023-02-28T12:00:00Z'
            nullable: false
        -
          name: calc_also_revenues_for_projects_with_hard_budget
          in: query
          required: false
          schema:
            type: boolean
            nullable: true
        -
          name: enhanced_list
          in: query
          required: false
          schema:
            type: boolean
            nullable: true
        -
          name: filter
          in: query
          required: false
          schema:
            properties:
              users_id:
                type: integer
                minimum: 0
                nullable: true
              customers_id:
                type: integer
                minimum: 0
                nullable: true
              projects_id:
                type: integer
                minimum: 0
                nullable: true
              subprojects_id:
                type: integer
                minimum: 0
                nullable: true
              services_id:
                type: integer
                minimum: 0
                nullable: true
              lumpsum_services_id:
                type: integer
                minimum: 0
                nullable: true
              billable:
                oneOf:
                  - { $ref: '#/components/schemas/Billable' }
                nullable: true
                type: integer
              texts_id:
                type: integer
                minimum: 0
                nullable: true
              text:
                type: string
                nullable: true
              budget_type:
                oneOf:
                  - { $ref: '#/components/schemas/BudgetOption' }
                nullable: true
                type: string
            type: object
            nullable: true
        -
          name: page
          in: query
          required: false
          schema:
            type: integer
            format: int64
            minimum: 1
            example: 1
        -
          name: items_per_page
          in: query
          required: false
          schema:
            type: integer
            format: int64
            maximum: 1000
            minimum: 1
            example: 100
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - paging
                  - entries
                properties:
                  paging: { required: [items_per_page, current_page, count_pages, count_items], properties: { items_per_page: { type: integer, format: int64, example: 1000 }, current_page: { type: integer, format: int64, example: 1 }, count_pages: { type: integer, format: int64, example: 1 }, count_items: { type: integer, format: int64, example: 4 } }, type: object }
                  entries: { type: array, items: { $ref: '#/components/schemas/EntryV2' } }
                type: object
        '400':
          description: 'An error occurred'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponses'
      deprecated: false
    post:
      tags:
        - Entry
      operationId: createEntryV2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - customers_id
                - billable
              properties:
                time_since:
                  type: string
                  format: date-time
                  example: '2023-02-28T12:00:00Z'
                  nullable: false
                time_until:
                  type: string
                  format: date-time
                  example: '2023-02-28T12:00:00Z'
                  nullable: false
                customers_id:
                  type: integer
                  minimum: 0
                  nullable: false
                billable:
                  $ref: '#/components/schemas/Billable'
                projects_id:
                  type: integer
                  minimum: 0
                  nullable: false
                subprojects_id:
                  type: integer
                  minimum: 0
                  nullable: false
                services_id:
                  type: integer
                  minimum: 0
                  nullable: false
                lumpsum_services_id:
                  type: integer
                  minimum: 0
                  nullable: false
                users_id:
                  type: integer
                  minimum: 0
                  nullable: false
                clocked_offline:
                  type: boolean
                  nullable: false
                duration:
                  type: integer
                  minimum: 0
                  nullable: false
                lumpsum:
                  type: number
                  format: float
                  minimum: 0
                  nullable: false
                hourly_rate:
                  type: number
                  format: float
                  minimum: 0
                  nullable: false
                lumpsum_services_amount:
                  type: number
                  format: float
                  minimum: 0
                  nullable: false
                text:
                  type: string
                  nullable: false
                time_clocked_since:
                  type: string
                  nullable: false
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - entry
                properties:
                  entry: { $ref: '#/components/schemas/EntryV2' }
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '400':
          description: 'An error occurred'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponses'
      deprecated: false
  '/v2/entries/{id}':
    get:
      tags:
        - Entry
      operationId: getEntryByIdV2
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - entry
                properties:
                  entry: { $ref: '#/components/schemas/EntryV2' }
                type: object
        '400':
          description: 'An error occurred'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponses'
      deprecated: false
    put:
      tags:
        - Entry
      operationId: updateEntryByIdV2
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                time_since:
                  type: string
                  format: date-time
                  example: '2023-02-28T12:00:00Z'
                  nullable: false
                time_until:
                  type: string
                  format: date-time
                  example: '2023-02-28T12:00:00Z'
                  nullable: false
                customers_id:
                  type: integer
                  minimum: 0
                  nullable: false
                billable:
                  $ref: '#/components/schemas/Billable'
                projects_id:
                  type: integer
                  minimum: 0
                  nullable: false
                subprojects_id:
                  type: integer
                  minimum: 0
                  nullable: false
                services_id:
                  type: integer
                  minimum: 0
                  nullable: false
                lumpsum_services_id:
                  type: integer
                  minimum: 0
                  nullable: false
                users_id:
                  type: integer
                  minimum: 0
                  nullable: false
                duration:
                  type: integer
                  minimum: 0
                  nullable: false
                lumpsum:
                  type: number
                  format: float
                  minimum: 0
                  nullable: false
                hourly_rate:
                  type: number
                  format: float
                  minimum: 0
                  nullable: false
                lumpsum_services_amount:
                  type: number
                  format: float
                  minimum: 0
                  nullable: false
                text:
                  type: string
                  nullable: false
                transfer_time_from:
                  type: integer
                  nullable: false
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - entry
                properties:
                  entry: { $ref: '#/components/schemas/EntryV2' }
                type: object
        '400':
          description: 'An error occurred'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponses'
      deprecated: false
    delete:
      tags:
        - Entry
      operationId: deleteEntryByIdV2
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - success
                properties:
                  success: { title: Success, type: boolean, example: true }
                type: object
        '400':
          description: 'An error occurred'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponses'
      deprecated: false
  /v2/entrygroups:
    get:
      tags:
        - EntryGroup
      operationId: getEntrygroupsV2
      parameters:
        -
          name: time_since
          in: query
          required: true
          schema:
            type: string
            format: date-time
            example: '2023-02-28T12:00:00Z'
            nullable: false
        -
          name: time_until
          in: query
          required: true
          schema:
            type: string
            format: date-time
            example: '2023-02-28T12:00:00Z'
            nullable: false
        -
          name: grouping
          in: query
          required: true
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Grouping'
            minItems: 1
            nullable: false
        -
          name: round_to_minutes
          in: query
          required: false
          schema:
            type: integer
            nullable: true
        -
          name: prepend_customer_to_project_name
          in: query
          required: false
          schema:
            type: boolean
            nullable: true
        -
          name: calc_also_revenues_for_projects_with_hard_budget
          in: query
          required: false
          schema:
            type: boolean
            nullable: true
        -
          name: filter
          in: query
          required: false
          schema:
            properties:
              users_id:
                type: integer
                minimum: 1
                nullable: true
              teams_id:
                type: integer
                minimum: 1
                nullable: true
              customers_id:
                type: integer
                minimum: 1
                nullable: true
              projects_id:
                type: integer
                minimum: 1
                nullable: true
              subprojects_id:
                type: integer
                minimum: 1
                nullable: true
              services_id:
                type: integer
                minimum: 1
                nullable: true
              lumpsum_services_id:
                type: integer
                minimum: 1
                nullable: true
              billable:
                oneOf:
                  - { $ref: '#/components/schemas/BillableDistinct' }
                nullable: true
                type: integer
              texts_id:
                type: integer
                minimum: 1
                nullable: true
              text:
                type: string
                nullable: true
              budget_type:
                oneOf:
                  - { $ref: '#/components/schemas/BudgetOption' }
                nullable: true
                type: string
            type: object
            nullable: true
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - groups
                properties:
                  groups: { type: array, items: { $ref: '#/components/schemas/EntryGroupV2' } }
                type: object
      deprecated: false
    put:
      tags:
        - EntryGroup
      operationId: updateEntrygroupV2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - time_since
                - time_until
              properties:
                time_since:
                  type: string
                  format: date-time
                  example: '2023-02-28T12:00:00Z'
                  nullable: false
                time_until:
                  type: string
                  format: date-time
                  example: '2023-02-28T12:00:00Z'
                  nullable: false
                users_id:
                  type: integer
                  minimum: 1
                  nullable: true
                customers_id:
                  type: integer
                  minimum: 1
                  nullable: true
                projects_id:
                  type: integer
                  minimum: 1
                  nullable: true
                subprojects_id:
                  type: integer
                  minimum: 1
                  nullable: true
                services_id:
                  type: integer
                  minimum: 1
                  nullable: true
                lumpsum_services_id:
                  type: integer
                  minimum: 1
                  nullable: true
                billable:
                  oneOf: [{ $ref: '#/components/schemas/BillableDistinct' }]
                  nullable: true
                  type: integer
                text:
                  type: string
                  nullable: true
                hourly_rate:
                  type: number
                  format: float
                  minimum: 0
                  nullable: true
                confirm_key:
                  description: 'For safety, the api will respond with a confirmation key with which you have to request once again in order to confirm your edit action'
                  type: string
                  nullable: false
                filter:
                  properties: { users_id: { type: integer, minimum: 1, nullable: true }, teams_id: { type: integer, minimum: 1, nullable: true }, customers_id: { type: integer, minimum: 1, nullable: true }, projects_id: { type: integer, minimum: 1, nullable: true }, subprojects_id: { type: integer, minimum: 1, nullable: true }, services_id: { type: integer, minimum: 1, nullable: true }, lumpsum_services_id: { type: integer, minimum: 1, nullable: true }, billable: { oneOf: [{ $ref: '#/components/schemas/BillableDistinct' }], nullable: true, type: integer }, texts_id: { type: integer, minimum: 1, nullable: true }, text: { type: string, nullable: true }, budget_type: { oneOf: [{ $ref: '#/components/schemas/BudgetOption' }], nullable: true, type: string } }
                  type: object
                  nullable: true
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                oneOf:
                  - { $ref: '#/components/schemas/EntryGroupUpdateV2' }
                  - { $ref: '#/components/schemas/EntryGroupConfirmUpdateV2' }
      deprecated: false
    delete:
      tags:
        - EntryGroup
      operationId: deleteEntrygroupV2
      parameters:
        -
          name: time_since
          in: query
          required: true
          schema:
            type: string
            format: date-time
            example: '2023-02-28T12:00:00Z'
            nullable: false
        -
          name: time_until
          in: query
          required: true
          schema:
            type: string
            format: date-time
            example: '2023-02-28T12:00:00Z'
            nullable: false
        -
          name: confirm_key
          in: query
          required: false
          schema:
            type: string
            nullable: false
        -
          name: filter
          in: query
          required: false
          schema:
            properties:
              users_id:
                type: integer
                minimum: 1
                nullable: true
              teams_id:
                type: integer
                minimum: 1
                nullable: true
              customers_id:
                type: integer
                minimum: 1
                nullable: true
              projects_id:
                type: integer
                minimum: 1
                nullable: true
              subprojects_id:
                type: integer
                minimum: 1
                nullable: true
              services_id:
                type: integer
                minimum: 1
                nullable: true
              lumpsum_services_id:
                type: integer
                minimum: 1
                nullable: true
              billable:
                oneOf:
                  - { $ref: '#/components/schemas/BillableDistinct' }
                nullable: true
                type: integer
              texts_id:
                type: integer
                minimum: 1
                nullable: true
              text:
                type: string
                nullable: true
              budget_type:
                oneOf:
                  - { $ref: '#/components/schemas/BudgetOption' }
                nullable: true
                type: string
            type: object
            nullable: true
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                oneOf:
                  - { $ref: '#/components/schemas/EntryGroupUpdateV2' }
                  - { $ref: '#/components/schemas/EntryGroupConfirmUpdateV2' }
      deprecated: false
  /v2/holidaysQuota:
    get:
      tags:
        - HolidayQuota
      operationId: getHolidaysQuotaV2
      parameters:
        -
          name: filter
          in: query
          required: false
          schema:
            properties:
              users_id:
                type: integer
                minimum: 1
                nullable: false
              year:
                type: integer
                maximum: 2037
                minimum: 2000
                nullable: false
            type: object
            nullable: false
        -
          name: users_id
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            nullable: false
        -
          name: year
          in: query
          required: false
          schema:
            type: integer
            maximum: 2037
            minimum: 2000
            nullable: false
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/HolidaysQuotumV2' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    post:
      tags:
        - HolidayQuota
      operationId: createHolidaysQuotumV2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - users_id
                - year_since
                - count
              properties:
                users_id:
                  type: integer
                  minimum: 1
                  nullable: false
                year_since:
                  description: 'Year from which on the holiday quota setting applies.'
                  type: integer
                  format: YYYY
                  maximum: 2037
                  minimum: 2000
                  example: '2023'
                  nullable: false
                year_until:
                  description: 'Year until the holiday quota setting applies.'
                  type: integer
                  format: YYYY
                  maximum: 2037
                  minimum: 2000
                  example: '2023'
                  nullable: true
                count:
                  description: 'Amount of holidays.'
                  type: number
                  format: float
                  maximum: 365
                  minimum: 0
                  nullable: false
                note:
                  type: string
                  maxLength: 1000
                  nullable: true
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/HolidaysQuotumV2' }
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiHolidaysQuotaV2Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  '/v2/holidaysQuota/{id}':
    get:
      tags:
        - HolidayQuota
      operationId: getHolidaysQuotumByIdV2
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/HolidaysQuotumV2' }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    put:
      tags:
        - HolidayQuota
      operationId: updateHolidaysQuotumByIdV2
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                year_since:
                  description: 'Year from which on the holiday quota setting applies.'
                  type: integer
                  format: YYYY
                  maximum: 2037
                  minimum: 2000
                  example: '2023'
                  nullable: false
                year_until:
                  description: 'Year until the holiday quota setting applies.'
                  type: integer
                  format: YYYY
                  maximum: 2037
                  minimum: 2000
                  example: '2023'
                  nullable: true
                count:
                  description: 'Amount of holidays.'
                  type: number
                  format: float
                  maximum: 365
                  minimum: 0
                  nullable: false
                note:
                  type: string
                  maxLength: 1000
                  nullable: true
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/HolidaysQuotumV2' }
                type: object
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiHolidaysQuotaV2Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    delete:
      tags:
        - HolidayQuota
      operationId: deleteHolidaysQuotumByIdV2
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - success
                properties:
                  success: { title: Success, type: boolean, example: true }
                type: object
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiHolidaysQuotaV2Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  '/v2/individualUserAccess/{usersId}/clear':
    post:
      tags:
        - IndividualUserAccess
      operationId: clearIndividualUserAccessByUsersIdV2
      parameters:
        -
          name: usersId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - success
                properties:
                  success: { title: Success, type: boolean, example: true }
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  '/v2/individualUserAccess/{usersId}/customers':
    put:
      tags:
        - IndividualUserAccess
      operationId: updateIndividualUserAccessCustomerByUsersIdV2
      parameters:
        -
          name: usersId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - id
                - type
                - value
              properties:
                id:
                  type: integer
                  minimum: 1
                  nullable: false
                type:
                  $ref: '#/components/schemas/AccessType'
                value:
                  $ref: '#/components/schemas/AccessValue'
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_projects_access_v2'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  '/v2/individualUserAccess/{usersId}/customers/general':
    put:
      tags:
        - IndividualUserAccess
      operationId: updateIndividualUserAccessCustomersGeneralByUsersIdV2
      parameters:
        -
          name: usersId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - type
                - value
              properties:
                type:
                  $ref: '#/components/schemas/AccessType'
                value:
                  $ref: '#/components/schemas/AccessValue'
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_projects_access_v2'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  '/v2/individualUserAccess/{usersId}/customersProjects':
    get:
      tags:
        - IndividualUserAccess
      operationId: getIndividualUserAccessCustomersProjectByUsersIdV2
      parameters:
        -
          name: usersId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_projects_access_v2'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  '/v2/individualUserAccess/{usersId}/projects':
    put:
      tags:
        - IndividualUserAccess
      operationId: updateIndividualUserAccessProjectByUsersIdV2
      parameters:
        -
          name: usersId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - id
                - type
                - value
              properties:
                id:
                  type: integer
                  minimum: 1
                  nullable: false
                type:
                  $ref: '#/components/schemas/AccessType'
                value:
                  $ref: '#/components/schemas/ApiAccessGroupsProjectsV2_AccessValueForPut'
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_projects_access_v2'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  '/v2/individualUserAccess/{usersId}/services':
    get:
      tags:
        - IndividualUserAccess
      operationId: getIndividualUserAccessServiceByUsersIdV2
      parameters:
        -
          name: usersId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/services_access_v2'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    put:
      tags:
        - IndividualUserAccess
      operationId: updateIndividualUserAccessServiceByUsersIdV2
      parameters:
        -
          name: usersId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - id
                - type
                - value
              properties:
                id:
                  type: integer
                  minimum: 1
                  nullable: false
                type:
                  $ref: '#/components/schemas/ApiAccessGroupsServicesV2_AccessTypeForPut'
                value:
                  $ref: '#/components/schemas/ApiAccessGroupsServicesV2_AccessValueForPut'
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/services_access_v2'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  '/v2/individualUserAccess/{usersId}/services/general':
    put:
      tags:
        - IndividualUserAccess
      operationId: updateIndividualUserAccessServicesGeneralByUsersIdV2
      parameters:
        -
          name: usersId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - type
                - value
              properties:
                type:
                  $ref: '#/components/schemas/ApiAccessGroupsServicesGeneralV2_AccessTypeForPut'
                value:
                  $ref: '#/components/schemas/AccessValue'
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/services_access_v2'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  /v2/nonbusinessDays:
    get:
      tags:
        - NonbusinessDay
      operationId: getNonbusinessDaysV2
      parameters:
        -
          name: year
          in: query
          required: false
          schema:
            type: integer
            maximum: 2037
            minimum: 2000
            nullable: false
        -
          name: nonbusiness_group_id
          in: query
          required: false
          schema:
            type: array
            items:
              type: integer
              minimum: 1
              nullable: false
            maxItems: 500
            nullable: false
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/NonbusinessDayV2' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    post:
      tags:
        - NonbusinessDay
      operationId: createNonbusinessDayV2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - nonbusiness_group_id
                - type
                - name
              properties:
                nonbusiness_group_id:
                  description: 'Default: Company default nonbusiness group'
                  type: integer
                  minimum: 1
                  nullable: false
                type:
                  $ref: '#/components/schemas/NonbusinessDayType'
                name:
                  type: string
                  maxLength: 100
                  nullable: false
                half_day:
                  type: boolean
                  nullable: false
                surcharge_special:
                  type: boolean
                  nullable: false
                special_id:
                  type: integer
                  minimum: 1
                  nullable: false
                day:
                  type: integer
                  maximum: 31
                  minimum: 1
                  nullable: false
                month:
                  type: integer
                  maximum: 12
                  minimum: 1
                  nullable: false
                year:
                  type: integer
                  maximum: 2037
                  minimum: 2000
                  nullable: false
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/NonbusinessDayV2' }
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiNonbusinessDaysV2Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  '/v2/nonbusinessDays/{id}':
    get:
      tags:
        - NonbusinessDay
      operationId: getNonbusinessDayByIdV2
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
        -
          name: year
          in: query
          required: false
          schema:
            type: integer
            maximum: 2037
            minimum: 2000
            nullable: false
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/NonbusinessDayV2' }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    put:
      tags:
        - NonbusinessDay
      operationId: updateNonbusinessDayByIdV2
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                type:
                  $ref: '#/components/schemas/NonbusinessDayType'
                name:
                  type: string
                  maxLength: 100
                  nullable: false
                half_day:
                  type: boolean
                  nullable: false
                surcharge_special:
                  type: boolean
                  nullable: false
                special_id:
                  type: integer
                  minimum: 1
                  nullable: true
                day:
                  type: integer
                  maximum: 31
                  minimum: 1
                  nullable: true
                month:
                  type: integer
                  maximum: 12
                  minimum: 1
                  nullable: true
                year:
                  type: integer
                  maximum: 2037
                  minimum: 2000
                  nullable: true
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/NonbusinessDayV2' }
                type: object
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiNonbusinessDaysV2Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    delete:
      tags:
        - NonbusinessDay
      operationId: deleteNonbusinessDayByIdV2
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - success
                properties:
                  success: { title: Success, type: boolean, example: true }
                type: object
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiNonbusinessDaysV2Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  /v2/nonbusinessGroups:
    get:
      tags:
        - NonbusinessGroup
      operationId: getNonbusinessGroupsV2
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/NonbusinessGroupV2' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    post:
      tags:
        - NonbusinessGroup
      operationId: createNonbusinessGroupV2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - name
              properties:
                name:
                  type: string
                  maxLength: 100
                  nullable: false
                preset:
                  type: string
                  enum: ['']
                  nullable: false
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/NonbusinessGroupV2' }
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiNonbusinessGroupsV2Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  '/v2/nonbusinessGroups/{id}':
    get:
      tags:
        - NonbusinessGroup
      operationId: getNonbusinessGroupByIdV2
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/NonbusinessGroupV2' }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    put:
      tags:
        - NonbusinessGroup
      operationId: updateNonbusinessGroupByIdV2
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  maxLength: 100
                  nullable: false
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/NonbusinessGroupV2' }
                type: object
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiNonbusinessGroupsV2Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    delete:
      tags:
        - NonbusinessGroup
      operationId: deleteNonbusinessGroupByIdV2
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - success
                properties:
                  success: { title: Success, type: boolean, example: true }
                type: object
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiNonbusinessGroupsV2Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  '/v2/users/{id}/access/customers-projects':
    get:
      tags:
        - User
      summary: 'Query access rights for customers and projects'
      operationId: getUsersAccessCustomersProjectByIdV2
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersAccessCustomersProjectV2'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  '/v2/users/{id}/access/services':
    get:
      tags:
        - User
      summary: 'Query access rights for services'
      operationId: getUsersAccessServiceByIdV2
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersAccessServiceV2'
      deprecated: false
  /v2/usersNonbusinessDays:
    get:
      tags:
        - UserNonbusinessDay
      operationId: getUsersNonbusinessDaysV2
      parameters:
        -
          name: year
          in: query
          required: false
          schema:
            type: integer
            maximum: 2037
            minimum: 2000
            nullable: false
        -
          name: filter
          in: query
          required: false
          schema:
            properties:
              users_id:
                type: array
                items:
                  type: integer
                  minimum: 1
                  nullable: false
                maxItems: 500
                nullable: false
            type: object
            nullable: false
        -
          name: page
          in: query
          required: false
          schema:
            type: integer
            format: int64
            minimum: 1
            example: 1
        -
          name: items_per_page
          in: query
          required: false
          schema:
            type: integer
            format: int64
            maximum: 100
            minimum: 1
            example: 100
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - paging
                  - data
                properties:
                  paging: { required: [items_per_page, current_page, count_pages, count_items], properties: { items_per_page: { type: integer, format: int64, example: 1000 }, current_page: { type: integer, format: int64, example: 1 }, count_pages: { type: integer, format: int64, example: 1 }, count_items: { type: integer, format: int64, example: 4 } }, type: object }
                  data: { type: array, items: { $ref: '#/components/schemas/UsersNonbusinessDayV2' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  /v2/workTimes:
    get:
      tags:
        - WorkTime
      operationId: getWorkTimesV2
      parameters:
        -
          name: date_since
          in: query
          required: true
          schema:
            type: string
            format: date
            example: '2023-02-28'
            nullable: false
        -
          name: date_until
          in: query
          required: true
          schema:
            type: string
            format: date
            example: '2023-02-28'
            nullable: false
        -
          name: users_id
          in: query
          required: true
          schema:
            type: integer
            nullable: false
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - paging
                  - work_time_days
                properties:
                  paging: { required: [items_per_page, current_page, count_pages, count_items], properties: { items_per_page: { type: integer, format: int64, example: 1000 }, current_page: { type: integer, format: int64, example: 1 }, count_pages: { type: integer, format: int64, example: 1 }, count_items: { type: integer, format: int64, example: 4 } }, type: object }
                  work_time_days: { type: array, items: { $ref: '#/components/schemas/WorkTimeV2' } }
                type: object
      deprecated: false
  /v2/workTimes/changeRequests:
    get:
      tags:
        - WorkTime
      operationId: getWorkTimesChangeRequestsV2
      parameters:
        -
          name: date_since
          in: query
          required: false
          schema:
            type: string
            format: date
            example: '2023-02-28'
            nullable: false
        -
          name: date_until
          in: query
          required: false
          schema:
            type: string
            format: date
            example: '2023-02-28'
            nullable: false
        -
          name: users_id
          in: query
          required: false
          schema:
            type: integer
            nullable: false
        -
          name: status
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/ChangeRequestStatus'
        -
          name: scope
          in: query
          description: 'Filter by scope, to get change requests that are pending approval or declined.'
          required: false
          schema:
            type: string
            enum:
              - approve
            nullable: false
        -
          name: teams_id
          in: query
          required: false
          schema:
            type: array
            items:
              type: integer
              minimum: 0
              nullable: true
            maxItems: 500
            nullable: false
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - paging
                  - data
                properties:
                  paging: { required: [items_per_page, current_page, count_pages, count_items], properties: { items_per_page: { type: integer, format: int64, example: 1000 }, current_page: { type: integer, format: int64, example: 1 }, count_pages: { type: integer, format: int64, example: 1 }, count_items: { type: integer, format: int64, example: 4 } }, type: object }
                  data: { type: array, items: { $ref: '#/components/schemas/WorkTimesChangeRequestV2' } }
                type: object
      deprecated: false
    post:
      tags:
        - WorkTime
      summary: 'Creates a new change request for work times.'
      description: "There can only be one pending change request per user and day.\nBy creating another change request for a day which already has a pending one,\nthe existing change request will be overwritten.\nIf a change request is submitted for a day on which the user is allowed to edit work times without a change request,\nthe changes are approved automatically and applied to the day's work times."
      operationId: createWorkTimesChangeRequestV2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - date
                - users_id
                - changes
              properties:
                date:
                  type: string
                  format: date
                  example: '2023-02-28'
                  nullable: false
                users_id:
                  type: integer
                  minimum: 1
                  nullable: false
                changes:
                  type: array
                  items: { properties: { type: { $ref: '#/components/schemas/ChangeRequestIntervalType' }, time_since: { type: string, format: date-time, example: '2023-02-28T12:00:00Z', nullable: false }, time_until: { type: string, format: date-time, example: '2023-02-28T12:00:00Z', nullable: false } }, type: object, nullable: false }
                  minItems: 1
                  nullable: false
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/WorkTimesChangeRequestPostV2' }
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  '/v2/workTimes/changeRequests/{id}':
    delete:
      tags:
        - WorkTime
      summary: 'Declined change requests cannot be deleted'
      operationId: deleteWorkTimesChangeRequestByIdV2
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - success
                properties:
                  success: { title: Success, type: boolean, example: true }
                type: object
      deprecated: false
  '/v2/workTimes/changeRequests/{id}/approve':
    post:
      tags:
        - WorkTime
      operationId: approveWorkTimesChangeRequestByIdV2
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - change_request
                properties:
                  change_request: { type: object, nullable: true }
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '400':
          description: 'An error occurred'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponses'
      deprecated: true
  '/v2/workTimes/changeRequests/{id}/decline':
    post:
      tags:
        - WorkTime
      operationId: createWorkTimesChangeRequestsDeclineByIdV2
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkTimesChangeRequestsDeclineV2'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '400':
          description: 'An error occurred'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponses'
      deprecated: true
  /v3/customers:
    get:
      tags:
        - Customer
      operationId: getCustomersV3
      parameters:
        -
          name: filter
          in: query
          required: false
          schema:
            properties:
              active:
                type: boolean
                nullable: false
              fulltext:
                type: string
                nullable: false
            type: object
            nullable: false
        -
          name: sort
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/SortIdNameActive'
            nullable: false
        -
          name: scope
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/CustomerProjectScope'
        -
          name: page
          in: query
          required: false
          schema:
            type: integer
            format: int64
            minimum: 1
            example: 1
        -
          name: items_per_page
          in: query
          required: false
          schema:
            type: integer
            format: int64
            maximum: 5000
            minimum: 1
            example: 100
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - paging
                  - data
                properties:
                  paging: { required: [items_per_page, current_page, count_pages, count_items], properties: { items_per_page: { type: integer, format: int64, example: 1000 }, current_page: { type: integer, format: int64, example: 1 }, count_pages: { type: integer, format: int64, example: 1 }, count_items: { type: integer, format: int64, example: 4 } }, type: object }
                  data: { type: array, items: { $ref: '#/components/schemas/CustomerV3' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    post:
      tags:
        - Customer
      operationId: createCustomerV3
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - name
              properties:
                name:
                  type: string
                  maxLength: 100
                  nullable: false
                number:
                  description: 'Freely selectable number for the customer'
                  type: string
                  maxLength: 50
                  nullable: true
                active:
                  type: boolean
                  nullable: false
                billable_default:
                  type: boolean
                  nullable: false
                note:
                  description: 'Can only be set by owners, managers or worker with elevated access `manage_customers_and_projects`'
                  type: string
                  maxLength: 1000
                  nullable: true
                color:
                  oneOf: [{ $ref: '#/components/schemas/CustomerColor' }]
                  nullable: true
                  description: "Possible values:\n- `1`: BloodOrange\n- `2`: Sunflower\n- `3`: LightGreen\n- `4`: Caribbean\n- `5`: Sky\n- `6`: BrandBlue\n- `7`: BluePurple\n- `8`: Magenta\n- `9`: ChewingGum"
                  type: integer
                bill_service_id:
                  description: 'Can only be set by owners, managers or worker with elevated access `manage_customers_and_projects` and if a billing application with customers support is linked up'
                  type: string
                  maxLength: 50
                  nullable: true
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/CustomerV3' }
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiCustomersV3Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  /v3/customers/countProjects:
    get:
      tags:
        - Customer
      operationId: getCustomersCountProjectsV3
      parameters:
        -
          name: customers_id
          in: query
          required: false
          schema:
            type: array
            items:
              type: integer
              minimum: 0
              nullable: false
            maxItems: 500
            nullable: false
        -
          name: scope
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/CustomerProjectScope'
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/CustomerCountProjectsV3' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  '/v3/customers/{id}':
    get:
      tags:
        - Customer
      operationId: getCustomerByIdV3
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/CustomerV3' }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    put:
      tags:
        - Customer
      operationId: updateCustomerByIdV3
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  maxLength: 100
                  nullable: false
                number:
                  description: 'Freely selectable number for the customer'
                  type: string
                  maxLength: 50
                  nullable: true
                active:
                  type: boolean
                  nullable: false
                billable_default:
                  type: boolean
                  nullable: false
                note:
                  description: 'Can only be set by owners, managers or worker with elevated access `manage_customers_and_projects`'
                  type: string
                  maxLength: 1000
                  nullable: true
                color:
                  $ref: '#/components/schemas/CustomerColor'
                bill_service_id:
                  description: 'Can only be set by owners, managers or worker with elevated access `manage_customers_and_projects` and if a billing application with customers support is linked up'
                  type: string
                  maxLength: 50
                  nullable: true
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/CustomerV3' }
                type: object
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiCustomersV3Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    delete:
      tags:
        - Customer
      operationId: deleteCustomerByIdV3
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
        -
          name: dry_run
          in: query
          required: false
          schema:
            type: boolean
            nullable: false
        -
          name: force
          in: query
          required: false
          schema:
            type: boolean
            nullable: false
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - success
                properties:
                  success: { title: Success, type: boolean, example: true }
                type: object
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiCustomersV3Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  /v3/entriesTexts:
    get:
      tags:
        - EntryText
      operationId: getEntriesTextsV3
      parameters:
        -
          name: term
          in: query
          description: 'Text to search for.'
          required: false
          schema:
            type: string
            maxLength: 1000
            nullable: false
        -
          name: mode
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/EntryTextMode'
        -
          name: items
          in: query
          description: 'Number of items to return.'
          required: false
          schema:
            type: integer
            maximum: 800
            minimum: 1
            nullable: false
        -
          name: filter
          in: query
          required: false
          schema:
            properties:
              customers_id:
                type: integer
                minimum: 1
                nullable: false
              projects_id:
                type: array
                items:
                  type: integer
                  minimum: 1
                  nullable: false
                maxItems: 500
                nullable: false
              services_id:
                type: array
                items:
                  type: integer
                  minimum: 1
                  nullable: false
                maxItems: 500
                nullable: false
              users_id:
                type: array
                items:
                  type: integer
                  minimum: 1
                  nullable: false
                maxItems: 500
                nullable: false
              billable:
                $ref: '#/components/schemas/Billable'
              time_since:
                type: string
                nullable: false
              time_until:
                type: string
                nullable: false
              day:
                type: string
                nullable: false
            type: object
            nullable: false
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/entriesText_v3' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  /v3/holidaysCarry:
    get:
      tags:
        - HolidayCarryover
      operationId: getHolidaysCarryV3
      parameters:
        -
          name: year
          in: query
          required: false
          schema:
            type: integer
            maximum: 2037
            minimum: 2000
            nullable: false
        -
          name: users_id
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            nullable: false
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/HolidaysCarryV3' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    post:
      tags:
        - HolidayCarryover
      operationId: createHolidaysCarryV3
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - year
                - users_id
                - count
              properties:
                year:
                  description: 'Year for which the holiday carryover applies.'
                  type: integer
                  format: YYYY
                  maximum: 2037
                  minimum: 2000
                  example: '2023'
                  nullable: false
                users_id:
                  type: integer
                  minimum: 1
                  nullable: false
                count:
                  description: 'Only full and half values allowed.'
                  type: number
                  format: float
                  maximum: 9999
                  minimum: -9999
                  nullable: false
                note:
                  type: string
                  maxLength: 1000
                  nullable: true
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/HolidaysCarryV3' }
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiHolidaysCarryV3Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  '/v3/holidaysCarry/{id}':
    get:
      tags:
        - HolidayCarryover
      operationId: getHolidaysCarryByIdV3
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/HolidaysCarryV3' }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    put:
      tags:
        - HolidayCarryover
      operationId: updateHolidaysCarryByIdV3
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                year:
                  description: 'Year for which the holiday carryover applies.'
                  type: integer
                  format: YYYY
                  maximum: 2037
                  minimum: 2000
                  example: '2023'
                  nullable: false
                count:
                  description: 'Only full and half values allowed.'
                  type: number
                  format: float
                  maximum: 9999
                  minimum: -9999
                  nullable: false
                note:
                  type: string
                  maxLength: 1000
                  nullable: true
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/HolidaysCarryV3' }
                type: object
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiHolidaysCarryV3Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    delete:
      tags:
        - HolidayCarryover
      operationId: deleteHolidaysCarryByIdV3
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - success
                properties:
                  success: { title: Success, type: boolean, example: true }
                type: object
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiHolidaysCarryV3Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  /v3/overtimeCarry:
    get:
      tags:
        - OvertimeCarry
      operationId: getOvertimeCarryV3
      parameters:
        -
          name: year
          in: query
          required: false
          schema:
            type: integer
            maximum: 2037
            minimum: 2000
            nullable: false
        -
          name: users_id
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            nullable: false
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/OvertimeCarryV3' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    post:
      tags:
        - OvertimeCarry
      operationId: createOvertimeCarryV3
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - year
                - users_id
                - hours
              properties:
                year:
                  type: integer
                  maximum: 2037
                  minimum: 2000
                  nullable: false
                users_id:
                  type: integer
                  minimum: 1
                  nullable: false
                hours:
                  type: number
                  format: float
                  maximum: 999
                  minimum: -999
                  nullable: false
                note:
                  type: string
                  maxLength: 1000
                  nullable: true
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/OvertimeCarryV3' }
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiOvertimeCarryV3Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  '/v3/overtimeCarry/{id}':
    get:
      tags:
        - OvertimeCarry
      operationId: getOvertimeCarryByIdV3
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/OvertimeCarryV3' }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    put:
      tags:
        - OvertimeCarry
      operationId: updateOvertimeCarryByIdV3
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                year:
                  type: integer
                  maximum: 2037
                  minimum: 2000
                  nullable: false
                hours:
                  type: number
                  format: float
                  maximum: 999
                  minimum: -999
                  nullable: false
                note:
                  type: string
                  maxLength: 1000
                  nullable: true
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/OvertimeCarryV3' }
                type: object
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiOvertimeCarryV3Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    delete:
      tags:
        - OvertimeCarry
      operationId: deleteOvertimeCarryByIdV3
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - success
                properties:
                  success: { title: Success, type: boolean, example: true }
                type: object
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiOvertimeCarryV3Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  /v3/overtimeReductions:
    get:
      tags:
        - OvertimeReduction
      operationId: getOvertimeReductionsV3
      parameters:
        -
          name: users_id
          in: query
          required: false
          schema:
            type: array
            items:
              type: integer
              minimum: 1
              nullable: false
            maxItems: 500
            nullable: false
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/OvertimeReductionV3' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    post:
      tags:
        - OvertimeReduction
      operationId: createOvertimeReductionV3
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - users_id
                - date
                - hours
              properties:
                users_id:
                  type: integer
                  minimum: 1
                  nullable: false
                date:
                  type: string
                  format: date
                  example: '2023-02-28'
                  nullable: false
                hours:
                  type: number
                  format: float
                  maximum: 999
                  minimum: -999
                  nullable: false
                note:
                  type: string
                  maxLength: 1000
                  nullable: true
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/OvertimeReductionV3' }
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiOvertimeReductionsV3Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  '/v3/overtimeReductions/{id}':
    get:
      tags:
        - OvertimeReduction
      operationId: getOvertimeReductionByIdV3
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/OvertimeReductionV3' }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    put:
      tags:
        - OvertimeReduction
      operationId: updateOvertimeReductionByIdV3
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                date:
                  type: string
                  format: date
                  example: '2023-02-28'
                  nullable: false
                hours:
                  type: number
                  format: float
                  maximum: 999
                  minimum: -999
                  nullable: false
                note:
                  type: string
                  maxLength: 1000
                  nullable: true
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/OvertimeReductionV3' }
                type: object
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiOvertimeReductionsV3Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    delete:
      tags:
        - OvertimeReduction
      operationId: deleteOvertimeReductionByIdV3
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - success
                properties:
                  success: { title: Success, type: boolean, example: true }
                type: object
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiOvertimeReductionsV3Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  '/v3/projects/{id}/setBilled':
    put:
      tags:
        - Project
      summary: 'Updates the billed state of a project'
      operationId: updateProjectsSetBilledByIdV3
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                billed:
                  type: boolean
                  nullable: false
                billed_money:
                  type: number
                  format: float
                  maximum: 99999999
                  minimum: 0
                  nullable: true
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/ProjectV4' }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  /v3/projects/reports:
    get:
      tags:
        - ProjectReport
      operationId: getProjectsReportsV3
      parameters:
        -
          name: filter
          in: query
          required: false
          schema:
            properties:
              active:
                type: boolean
                nullable: false
              fulltext:
                type: string
                nullable: false
              budget_source:
                type: array
                items:
                  $ref: '#/components/schemas/BudgetSource'
                nullable: false
            type: object
            nullable: false
        -
          name: sort
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ApiProjectsReportsV3_SortForIndex'
            nullable: false
        -
          name: page
          in: query
          required: false
          schema:
            type: integer
            format: int64
            minimum: 1
            example: 1
        -
          name: items_per_page
          in: query
          required: false
          schema:
            type: integer
            format: int64
            maximum: 1000
            minimum: 1
            example: 100
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - paging
                  - data
                properties:
                  paging: { required: [items_per_page, current_page, count_pages, count_items], properties: { items_per_page: { type: integer, format: int64, example: 1000 }, current_page: { type: integer, format: int64, example: 1 }, count_pages: { type: integer, format: int64, example: 1 }, count_items: { type: integer, format: int64, example: 4 } }, type: object }
                  data: { type: array, items: { $ref: '#/components/schemas/ProjectReportsV3' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  /v3/subprojects:
    get:
      tags:
        - Subproject
      operationId: getSubprojectsV3
      parameters:
        -
          name: filter
          in: query
          required: false
          schema:
            properties:
              active:
                type: boolean
                nullable: false
              fulltext:
                type: string
                nullable: false
              projects_id:
                type: integer
                nullable: false
            type: object
            nullable: false
        -
          name: sort
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/SortIdName'
        -
          name: page
          in: query
          required: false
          schema:
            type: integer
            format: int64
            minimum: 1
            example: 1
        -
          name: items_per_page
          in: query
          required: false
          schema:
            type: integer
            format: int64
            maximum: 5000
            minimum: 1
            example: 100
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - paging
                  - data
                properties:
                  paging: { required: [items_per_page, current_page, count_pages, count_items], properties: { items_per_page: { type: integer, format: int64, example: 1000 }, current_page: { type: integer, format: int64, example: 1 }, count_pages: { type: integer, format: int64, example: 1 }, count_items: { type: integer, format: int64, example: 4 } }, type: object }
                  data: { type: array, items: { $ref: '#/components/schemas/SubprojectV3' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    post:
      tags:
        - Subproject
      operationId: createSubprojectV3
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - projects_id
                - name
              properties:
                projects_id:
                  type: integer
                  nullable: false
                name:
                  type: string
                  maxLength: 100
                  nullable: false
                billable_default:
                  type: boolean
                  nullable: false
                budget:
                  properties: { amount: { type: number, format: float, maximum: 99999999.99, minimum: -99999999.99, nullable: true }, notification_thresholds: { type: array, items: { $ref: '#/components/schemas/Thresholds' }, nullable: false } }
                  type: object
                  nullable: true
                number:
                  type: string
                  maxLength: 50
                  nullable: true
                note:
                  type: string
                  maxLength: 1000
                  nullable: true
                start_date:
                  type: string
                  format: date
                  example: '2023-02-28'
                  nullable: true
                deadline:
                  type: string
                  format: date
                  example: '2023-02-28'
                  nullable: true
                bill_service_id:
                  type: string
                  maxLength: 50
                  nullable: true
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/SubprojectV3' }
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiSubprojectsV3Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  '/v3/subprojects/{id}':
    get:
      tags:
        - Subproject
      operationId: getSubprojectByIdV3
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/SubprojectV3' }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    put:
      tags:
        - Subproject
      operationId: updateSubprojectByIdV3
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  maxLength: 100
                  nullable: false
                billable_default:
                  type: boolean
                  nullable: false
                budget:
                  properties: { amount: { type: number, format: float, maximum: 99999999.99, minimum: -99999999.99, nullable: true }, notification_thresholds: { type: array, items: { $ref: '#/components/schemas/Thresholds' }, nullable: false }, monetary: { type: boolean, nullable: false }, hard: { type: boolean, nullable: false } }
                  type: object
                  nullable: true
                number:
                  type: string
                  maxLength: 50
                  nullable: true
                note:
                  type: string
                  maxLength: 1000
                  nullable: true
                start_date:
                  type: string
                  format: date
                  example: '2023-02-28'
                  nullable: true
                deadline:
                  type: string
                  format: date
                  example: '2023-02-28'
                  nullable: true
                bill_service_id:
                  type: string
                  maxLength: 50
                  nullable: true
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/SubprojectV3' }
                type: object
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiSubprojectsV3Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    delete:
      tags:
        - Subproject
      operationId: deleteSubprojectByIdV3
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
        -
          name: dry_run
          in: query
          required: false
          schema:
            type: boolean
            nullable: false
        -
          name: force
          in: query
          required: false
          schema:
            type: boolean
            nullable: false
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - success
                properties:
                  success: { title: Success, type: boolean, example: true }
                type: object
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiSubprojectsV3Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  '/v3/subprojects/{id}/complete':
    put:
      tags:
        - Subproject
      operationId: completeSubprojectByIdV3
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - completed
              properties:
                completed:
                  type: boolean
                  nullable: false
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/SubprojectV3' }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  /v3/teams:
    get:
      tags:
        - Team
      operationId: getTeamsV3
      parameters:
        -
          name: filter
          in: query
          required: false
          schema:
            properties:
              fulltext:
                type: string
                nullable: false
            type: object
            nullable: false
        -
          name: scope
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/UserScope'
        -
          name: sort
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/SortIdName'
            nullable: false
        -
          name: page
          in: query
          required: false
          schema:
            type: integer
            format: int64
            minimum: 1
            example: 1
        -
          name: items_per_page
          in: query
          required: false
          schema:
            type: integer
            format: int64
            maximum: 1000
            minimum: 1
            example: 100
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - paging
                  - data
                properties:
                  paging: { required: [items_per_page, current_page, count_pages, count_items], properties: { items_per_page: { type: integer, format: int64, example: 1000 }, current_page: { type: integer, format: int64, example: 1 }, count_pages: { type: integer, format: int64, example: 1 }, count_items: { type: integer, format: int64, example: 4 } }, type: object }
                  data: { type: array, items: { $ref: '#/components/schemas/TeamV3' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    post:
      tags:
        - Team
      operationId: createTeamV3
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - name
              properties:
                name:
                  type: string
                  maxLength: 100
                  nullable: false
                leader:
                  description: 'The user ID of the team leader'
                  type: integer
                  nullable: true
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/TeamV3' }
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiTeamsV3Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  '/v3/teams/{id}':
    get:
      tags:
        - Team
      operationId: getTeamByIdV3
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/TeamV3' }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    put:
      tags:
        - Team
      operationId: updateTeamByIdV3
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  maxLength: 100
                  nullable: false
                leader:
                  description: 'The user ID of the team leader'
                  type: integer
                  nullable: true
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/TeamV3' }
                type: object
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiTeamsV3Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    delete:
      tags:
        - Team
      operationId: deleteTeamByIdV3
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - success
                properties:
                  success: { title: Success, type: boolean, example: true }
                type: object
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiTeamsV3Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  /v3/users:
    get:
      tags:
        - User
      operationId: getUsersV3
      parameters:
        -
          name: filter
          in: query
          required: false
          schema:
            properties:
              active:
                type: boolean
                nullable: false
              fulltext:
                type: string
                nullable: false
              teams_id:
                type: array
                items:
                  type: integer
                  minimum: 0
                  nullable: true
                maxItems: 500
                nullable: false
            type: object
            nullable: false
        -
          name: scope
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/UserScope'
        -
          name: sort
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ApiUsersV3_SortForIndex'
            nullable: false
        -
          name: page
          in: query
          required: false
          schema:
            type: integer
            format: int64
            minimum: 1
            example: 1
        -
          name: items_per_page
          in: query
          required: false
          schema:
            type: integer
            format: int64
            maximum: 1000
            minimum: 1
            example: 100
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - paging
                  - data
                properties:
                  paging: { required: [items_per_page, current_page, count_pages, count_items], properties: { items_per_page: { type: integer, format: int64, example: 1000 }, current_page: { type: integer, format: int64, example: 1 }, count_pages: { type: integer, format: int64, example: 1 }, count_items: { type: integer, format: int64, example: 4 } }, type: object }
                  data: { type: array, items: { $ref: '#/components/schemas/UserV3' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    post:
      tags:
        - User
      operationId: createUserV3
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - email
                - name
                - role
              properties:
                email:
                  type: string
                  format: email
                  maxLength: 90
                  nullable: false
                name:
                  type: string
                  maxLength: 100
                  nullable: false
                role:
                  $ref: '#/components/schemas/Role'
                active:
                  type: boolean
                  nullable: false
                boss:
                  type: integer
                  minimum: 1
                  nullable: true
                number:
                  type: string
                  maxLength: 50
                  nullable: true
                language:
                  $ref: '#/components/schemas/Language'
                teams_id:
                  type: integer
                  minimum: 1
                  nullable: true
                timeformat_12h:
                  description: 'Use 12h time format?'
                  type: boolean
                  nullable: false
                timezone:
                  type: string
                  enum: [Africa/Abidjan, Africa/Accra, Africa/Addis_Ababa, Africa/Algiers, Africa/Asmara, Africa/Bamako, Africa/Bangui, Africa/Banjul, Africa/Bissau, Africa/Blantyre, Africa/Brazzaville, Africa/Bujumbura, Africa/Cairo, Africa/Casablanca, Africa/Ceuta, Africa/Conakry, Africa/Dakar, Africa/Dar_es_Salaam, Africa/Djibouti, Africa/Douala, Africa/El_Aaiun, Africa/Freetown, Africa/Gaborone, Africa/Harare, Africa/Johannesburg, Africa/Juba, Africa/Kampala, Africa/Khartoum, Africa/Kigali, Africa/Kinshasa, Africa/Lagos, Africa/Libreville, Africa/Lome, Africa/Luanda, Africa/Lubumbashi, Africa/Lusaka, Africa/Malabo, Africa/Maputo, Africa/Maseru, Africa/Mbabane, Africa/Mogadishu, Africa/Monrovia, Africa/Nairobi, Africa/Ndjamena, Africa/Niamey, Africa/Nouakchott, Africa/Ouagadougou, Africa/Porto-Novo, Africa/Tripoli, Africa/Tunis, Africa/Windhoek, America/Adak, America/Anchorage, America/Anguilla, America/Antigua, America/Araguaina, America/Argentina/Buenos_Aires, America/Argentina/Catamarca, America/Argentina/Cordoba, America/Argentina/Jujuy, America/Argentina/La_Rioja, America/Argentina/Mendoza, America/Argentina/Rio_Gallegos, America/Argentina/Salta, America/Argentina/San_Juan, America/Argentina/San_Luis, America/Argentina/Tucuman, America/Argentina/Ushuaia, America/Aruba, America/Asuncion, America/Atikokan, America/Bahia, America/Bahia_Banderas, America/Barbados, America/Belem, America/Belize, America/Blanc-Sablon, America/Boa_Vista, America/Bogota, America/Boise, America/Cambridge_Bay, America/Campo_Grande, America/Cancun, America/Caracas, America/Cayenne, America/Cayman, America/Chicago, America/Chihuahua, America/Costa_Rica, America/Creston, America/Cuiaba, America/Curacao, America/Danmarkshavn, America/Dawson, America/Dawson_Creek, America/Denver, America/Detroit, America/Dominica, America/Edmonton, America/Eirunepe, America/El_Salvador, America/Fort_Nelson, America/Fortaleza, America/Glace_Bay, America/Goose_Bay, America/Grand_Turk, America/Grenada, America/Guadeloupe, America/Guatemala, America/Guayaquil, America/Guyana, America/Halifax, America/Havana, America/Hermosillo, America/Indiana/Indianapolis, America/Indiana/Knox, America/Indiana/Marengo, America/Indiana/Petersburg, America/Indiana/Tell_City, America/Indiana/Vevay, America/Indiana/Vincennes, America/Indiana/Winamac, America/Inuvik, America/Iqaluit, America/Jamaica, America/Juneau, America/Kentucky/Louisville, America/Kentucky/Monticello, America/Kralendijk, America/La_Paz, America/Lima, America/Los_Angeles, America/Lower_Princes, America/Maceio, America/Managua, America/Manaus, America/Marigot, America/Martinique, America/Matamoros, America/Mazatlan, America/Menominee, America/Merida, America/Mexico_City, America/Miquelon, America/Moncton, America/Monterrey, America/Montevideo, America/Montserrat, America/Nassau, America/New_York, America/Nome, America/Noronha, America/North_Dakota/Beulah, America/North_Dakota/Center, America/North_Dakota/New_Salem, America/Ojinaga, America/Panama, America/Paramaribo, America/Phoenix, America/Port-au-Prince, America/Port_of_Spain, America/Porto_Velho, America/Puerto_Rico, America/Punta_Arenas, America/Rankin_Inlet, America/Recife, America/Regina, America/Resolute, America/Rio_Branco, America/Santarem, America/Santiago, America/Santo_Domingo, America/Sao_Paulo, America/Scoresbysund, America/Sitka, America/St_Barthelemy, America/St_Johns, America/St_Kitts, America/St_Lucia, America/St_Thomas, America/St_Vincent, America/Swift_Current, America/Tegucigalpa, America/Thule, America/Tijuana, America/Toronto, America/Tortola, America/Vancouver, America/Whitehorse, America/Winnipeg, America/Yakutat, Antarctica/Davis, Antarctica/DumontDUrville, Antarctica/Macquarie, Antarctica/Mawson, Antarctica/McMurdo, Antarctica/Palmer, Antarctica/Rothera, Antarctica/Syowa, Arctic/Longyearbyen, Asia/Aden, Asia/Almaty, Asia/Amman, Asia/Anadyr, Asia/Aqtau, Asia/Aqtobe, Asia/Ashgabat, Asia/Atyrau, Asia/Baghdad, Asia/Bahrain, Asia/Baku, Asia/Bangkok, Asia/Barnaul, Asia/Beirut, Asia/Bishkek, Asia/Brunei, Asia/Chita, Asia/Colombo, Asia/Damascus, Asia/Dhaka, Asia/Dili, Asia/Dubai, Asia/Dushanbe, Asia/Gaza, Asia/Hebron, Asia/Ho_Chi_Minh, Asia/Hong_Kong, Asia/Hovd, Asia/Irkutsk, Asia/Jakarta, Asia/Jayapura, Asia/Jerusalem, Asia/Kabul, Asia/Kamchatka, Asia/Karachi, Asia/Kathmandu, Asia/Khandyga, Asia/Kolkata, Asia/Krasnoyarsk, Asia/Kuala_Lumpur, Asia/Kuching, Asia/Kuwait, Asia/Macau, Asia/Magadan, Asia/Makassar, Asia/Manila, Asia/Muscat, Asia/Nicosia, Asia/Novokuznetsk, Asia/Novosibirsk, Asia/Omsk, Asia/Oral, Asia/Phnom_Penh, Asia/Pontianak, Asia/Pyongyang, Asia/Qatar, Asia/Qostanay, Asia/Riyadh, Asia/Sakhalin, Asia/Samarkand, Asia/Seoul, Asia/Shanghai, Asia/Singapore, Asia/Srednekolymsk, Asia/Taipei, Asia/Tashkent, Asia/Tbilisi, Asia/Tehran, Asia/Thimphu, Asia/Tokyo, Asia/Tomsk, Asia/Ulaanbaatar, Asia/Urumqi, Asia/Ust-Nera, Asia/Vientiane, Asia/Vladivostok, Asia/Yakutsk, Asia/Yangon, Asia/Yekaterinburg, Asia/Yerevan, Atlantic/Azores, Atlantic/Bermuda, Atlantic/Canary, Atlantic/Cape_Verde, Atlantic/Faroe, Atlantic/Madeira, Atlantic/Reykjavik, Atlantic/South_Georgia, Atlantic/St_Helena, Atlantic/Stanley, Australia/Adelaide, Australia/Brisbane, Australia/Broken_Hill, Australia/Darwin, Australia/Eucla, Australia/Hobart, Australia/Lindeman, Australia/Lord_Howe, Australia/Melbourne, Australia/Perth, Australia/Sydney, Europe/Amsterdam, Europe/Andorra, Europe/Astrakhan, Europe/Athens, Europe/Belgrade, Europe/Berlin, Europe/Bratislava, Europe/Brussels, Europe/Bucharest, Europe/Budapest, Europe/Busingen, Europe/Chisinau, Europe/Copenhagen, Europe/Dublin, Europe/Gibraltar, Europe/Guernsey, Europe/Helsinki, Europe/Isle_of_Man, Europe/Istanbul, Europe/Jersey, Europe/Kaliningrad, Europe/Kirov, Europe/Kyiv, Europe/Lisbon, Europe/Ljubljana, Europe/London, Europe/Luxembourg, Europe/Madrid, Europe/Malta, Europe/Mariehamn, Europe/Minsk, Europe/Monaco, Europe/Moscow, Europe/Oslo, Europe/Paris, Europe/Podgorica, Europe/Prague, Europe/Riga, Europe/Rome, Europe/Samara, Europe/San_Marino, Europe/Sarajevo, Europe/Saratov, Europe/Simferopol, Europe/Skopje, Europe/Sofia, Europe/Stockholm, Europe/Tallinn, Europe/Tirane, Europe/Ulyanovsk, Europe/Vaduz, Europe/Vatican, Europe/Vienna, Europe/Vilnius, Europe/Volgograd, Europe/Warsaw, Europe/Zagreb, Europe/Zurich, Indian/Antananarivo, Indian/Chagos, Indian/Christmas, Indian/Cocos, Indian/Comoro, Indian/Kerguelen, Indian/Mahe, Indian/Maldives, Indian/Mauritius, Indian/Mayotte, Indian/Reunion, Pacific/Apia, Pacific/Auckland, Pacific/Bougainville, Pacific/Chatham, Pacific/Chuuk, Pacific/Easter, Pacific/Efate, Pacific/Fakaofo, Pacific/Fiji, Pacific/Funafuti, Pacific/Galapagos, Pacific/Gambier, Pacific/Guadalcanal, Pacific/Guam, Pacific/Honolulu, Pacific/Kiritimati, Pacific/Kosrae, Pacific/Kwajalein, Pacific/Majuro, Pacific/Marquesas, Pacific/Midway, Pacific/Nauru, Pacific/Niue, Pacific/Norfolk, Pacific/Noumea, Pacific/Pago_Pago, Pacific/Palau, Pacific/Pitcairn, Pacific/Pohnpei, Pacific/Port_Moresby, Pacific/Rarotonga, Pacific/Saipan, Pacific/Tahiti, Pacific/Tarawa, Pacific/Tongatapu, Pacific/Wake, Pacific/Wallis, UTC]
                  nullable: false
                wage_type:
                  $ref: '#/components/schemas/WageType'
                weekstart_monday:
                  description: 'Start week on Monday?'
                  type: boolean
                  nullable: false
                weekend_friday:
                  description: 'End week on Friday?'
                  type: boolean
                  nullable: false
                show_favorites:
                  type: boolean
                  nullable: false
                mail_to_user:
                  description: 'Sent mail to the new co-worker? (default: false)'
                  type: boolean
                  nullable: false
                start_date:
                  type: string
                  format: date
                  example: '2023-02-28'
                  nullable: true
                budget_notifications:
                  type: boolean
                  nullable: false
                edit_lock:
                  description: 'The date after the co-worker is not allowed to edit his entries anymore. Can only be set by owners, managers or worker with elevated access `manage_users_access`.'
                  type: string
                  format: date
                  example: '2023-02-28'
                  nullable: true
                edit_lock_dyn:
                  oneOf: [{ $ref: '#/components/schemas/EditLockDay' }]
                  nullable: true
                  description: 'Dynamic edit lock for this co-worker. Can only be set by owners, managers or worker with elevated access `manage_users_access`.'
                  type: integer
                edit_lock_sync:
                  description: 'Can future changes to the company-wide edit lock overwrite the edit lock for this co-worker? Can only be set by owners, managers or worker with elevated access `manage_users_access`.'
                  type: boolean
                  nullable: true
                work_time_edit_lock_days:
                  oneOf: [{ $ref: '#/components/schemas/WorkTimeEditLockDay' }]
                  nullable: true
                  description: 'Relative work time editing lock in days for the co-worker. Can only be set by owners, managers or worker with elevated access `manage_users_access`.'
                  type: integer
                default_holidays_count:
                  description: "Uses the company's default holiday count"
                  type: boolean
                  nullable: false
                default_target_hours:
                  description: "Uses the company's default target hours"
                  type: boolean
                  nullable: false
                work_time_regulations_id:
                  type: integer
                  minimum: 1
                  nullable: true
                default_work_time_regulation:
                  description: "Uses the company's default work time regulation"
                  type: boolean
                  nullable: false
                absence_managers_id:
                  type: array
                  items: { type: integer, minimum: 1, nullable: false }
                  maxItems: 500
                  minItems: 0
                  nullable: false
                access_groups_ids:
                  type: array
                  items: { type: integer, minimum: 1, nullable: false }
                  maxItems: 30
                  minItems: 0
                  nullable: false
                bill_service_id:
                  type: string
                  maxLength: 50
                  nullable: true
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/UserV3' }
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiUsersV3Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  '/v3/users/{id}':
    get:
      tags:
        - User
      operationId: getUserByIdV3
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
        -
          name: scope
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/UserScope'
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/UserV3' }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    put:
      tags:
        - User
      operationId: updateUserByIdV3
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  format: email
                  maxLength: 90
                  nullable: false
                name:
                  type: string
                  maxLength: 100
                  nullable: false
                role:
                  $ref: '#/components/schemas/Role'
                active:
                  type: boolean
                  nullable: false
                boss:
                  type: integer
                  minimum: 1
                  nullable: true
                number:
                  type: string
                  maxLength: 50
                  nullable: true
                language:
                  $ref: '#/components/schemas/Language'
                teams_id:
                  type: integer
                  minimum: 1
                  nullable: true
                timeformat_12h:
                  description: 'Use 12h time format?'
                  type: boolean
                  nullable: false
                timezone:
                  description: 'Can only be changed for the company creator during the trial phase.'
                  type: string
                  enum: [Africa/Abidjan, Africa/Accra, Africa/Addis_Ababa, Africa/Algiers, Africa/Asmara, Africa/Bamako, Africa/Bangui, Africa/Banjul, Africa/Bissau, Africa/Blantyre, Africa/Brazzaville, Africa/Bujumbura, Africa/Cairo, Africa/Casablanca, Africa/Ceuta, Africa/Conakry, Africa/Dakar, Africa/Dar_es_Salaam, Africa/Djibouti, Africa/Douala, Africa/El_Aaiun, Africa/Freetown, Africa/Gaborone, Africa/Harare, Africa/Johannesburg, Africa/Juba, Africa/Kampala, Africa/Khartoum, Africa/Kigali, Africa/Kinshasa, Africa/Lagos, Africa/Libreville, Africa/Lome, Africa/Luanda, Africa/Lubumbashi, Africa/Lusaka, Africa/Malabo, Africa/Maputo, Africa/Maseru, Africa/Mbabane, Africa/Mogadishu, Africa/Monrovia, Africa/Nairobi, Africa/Ndjamena, Africa/Niamey, Africa/Nouakchott, Africa/Ouagadougou, Africa/Porto-Novo, Africa/Tripoli, Africa/Tunis, Africa/Windhoek, America/Adak, America/Anchorage, America/Anguilla, America/Antigua, America/Araguaina, America/Argentina/Buenos_Aires, America/Argentina/Catamarca, America/Argentina/Cordoba, America/Argentina/Jujuy, America/Argentina/La_Rioja, America/Argentina/Mendoza, America/Argentina/Rio_Gallegos, America/Argentina/Salta, America/Argentina/San_Juan, America/Argentina/San_Luis, America/Argentina/Tucuman, America/Argentina/Ushuaia, America/Aruba, America/Asuncion, America/Atikokan, America/Bahia, America/Bahia_Banderas, America/Barbados, America/Belem, America/Belize, America/Blanc-Sablon, America/Boa_Vista, America/Bogota, America/Boise, America/Cambridge_Bay, America/Campo_Grande, America/Cancun, America/Caracas, America/Cayenne, America/Cayman, America/Chicago, America/Chihuahua, America/Costa_Rica, America/Creston, America/Cuiaba, America/Curacao, America/Danmarkshavn, America/Dawson, America/Dawson_Creek, America/Denver, America/Detroit, America/Dominica, America/Edmonton, America/Eirunepe, America/El_Salvador, America/Fort_Nelson, America/Fortaleza, America/Glace_Bay, America/Goose_Bay, America/Grand_Turk, America/Grenada, America/Guadeloupe, America/Guatemala, America/Guayaquil, America/Guyana, America/Halifax, America/Havana, America/Hermosillo, America/Indiana/Indianapolis, America/Indiana/Knox, America/Indiana/Marengo, America/Indiana/Petersburg, America/Indiana/Tell_City, America/Indiana/Vevay, America/Indiana/Vincennes, America/Indiana/Winamac, America/Inuvik, America/Iqaluit, America/Jamaica, America/Juneau, America/Kentucky/Louisville, America/Kentucky/Monticello, America/Kralendijk, America/La_Paz, America/Lima, America/Los_Angeles, America/Lower_Princes, America/Maceio, America/Managua, America/Manaus, America/Marigot, America/Martinique, America/Matamoros, America/Mazatlan, America/Menominee, America/Merida, America/Mexico_City, America/Miquelon, America/Moncton, America/Monterrey, America/Montevideo, America/Montserrat, America/Nassau, America/New_York, America/Nome, America/Noronha, America/North_Dakota/Beulah, America/North_Dakota/Center, America/North_Dakota/New_Salem, America/Ojinaga, America/Panama, America/Paramaribo, America/Phoenix, America/Port-au-Prince, America/Port_of_Spain, America/Porto_Velho, America/Puerto_Rico, America/Punta_Arenas, America/Rankin_Inlet, America/Recife, America/Regina, America/Resolute, America/Rio_Branco, America/Santarem, America/Santiago, America/Santo_Domingo, America/Sao_Paulo, America/Scoresbysund, America/Sitka, America/St_Barthelemy, America/St_Johns, America/St_Kitts, America/St_Lucia, America/St_Thomas, America/St_Vincent, America/Swift_Current, America/Tegucigalpa, America/Thule, America/Tijuana, America/Toronto, America/Tortola, America/Vancouver, America/Whitehorse, America/Winnipeg, America/Yakutat, Antarctica/Davis, Antarctica/DumontDUrville, Antarctica/Macquarie, Antarctica/Mawson, Antarctica/McMurdo, Antarctica/Palmer, Antarctica/Rothera, Antarctica/Syowa, Arctic/Longyearbyen, Asia/Aden, Asia/Almaty, Asia/Amman, Asia/Anadyr, Asia/Aqtau, Asia/Aqtobe, Asia/Ashgabat, Asia/Atyrau, Asia/Baghdad, Asia/Bahrain, Asia/Baku, Asia/Bangkok, Asia/Barnaul, Asia/Beirut, Asia/Bishkek, Asia/Brunei, Asia/Chita, Asia/Colombo, Asia/Damascus, Asia/Dhaka, Asia/Dili, Asia/Dubai, Asia/Dushanbe, Asia/Gaza, Asia/Hebron, Asia/Ho_Chi_Minh, Asia/Hong_Kong, Asia/Hovd, Asia/Irkutsk, Asia/Jakarta, Asia/Jayapura, Asia/Jerusalem, Asia/Kabul, Asia/Kamchatka, Asia/Karachi, Asia/Kathmandu, Asia/Khandyga, Asia/Kolkata, Asia/Krasnoyarsk, Asia/Kuala_Lumpur, Asia/Kuching, Asia/Kuwait, Asia/Macau, Asia/Magadan, Asia/Makassar, Asia/Manila, Asia/Muscat, Asia/Nicosia, Asia/Novokuznetsk, Asia/Novosibirsk, Asia/Omsk, Asia/Oral, Asia/Phnom_Penh, Asia/Pontianak, Asia/Pyongyang, Asia/Qatar, Asia/Qostanay, Asia/Riyadh, Asia/Sakhalin, Asia/Samarkand, Asia/Seoul, Asia/Shanghai, Asia/Singapore, Asia/Srednekolymsk, Asia/Taipei, Asia/Tashkent, Asia/Tbilisi, Asia/Tehran, Asia/Thimphu, Asia/Tokyo, Asia/Tomsk, Asia/Ulaanbaatar, Asia/Urumqi, Asia/Ust-Nera, Asia/Vientiane, Asia/Vladivostok, Asia/Yakutsk, Asia/Yangon, Asia/Yekaterinburg, Asia/Yerevan, Atlantic/Azores, Atlantic/Bermuda, Atlantic/Canary, Atlantic/Cape_Verde, Atlantic/Faroe, Atlantic/Madeira, Atlantic/Reykjavik, Atlantic/South_Georgia, Atlantic/St_Helena, Atlantic/Stanley, Australia/Adelaide, Australia/Brisbane, Australia/Broken_Hill, Australia/Darwin, Australia/Eucla, Australia/Hobart, Australia/Lindeman, Australia/Lord_Howe, Australia/Melbourne, Australia/Perth, Australia/Sydney, Europe/Amsterdam, Europe/Andorra, Europe/Astrakhan, Europe/Athens, Europe/Belgrade, Europe/Berlin, Europe/Bratislava, Europe/Brussels, Europe/Bucharest, Europe/Budapest, Europe/Busingen, Europe/Chisinau, Europe/Copenhagen, Europe/Dublin, Europe/Gibraltar, Europe/Guernsey, Europe/Helsinki, Europe/Isle_of_Man, Europe/Istanbul, Europe/Jersey, Europe/Kaliningrad, Europe/Kirov, Europe/Kyiv, Europe/Lisbon, Europe/Ljubljana, Europe/London, Europe/Luxembourg, Europe/Madrid, Europe/Malta, Europe/Mariehamn, Europe/Minsk, Europe/Monaco, Europe/Moscow, Europe/Oslo, Europe/Paris, Europe/Podgorica, Europe/Prague, Europe/Riga, Europe/Rome, Europe/Samara, Europe/San_Marino, Europe/Sarajevo, Europe/Saratov, Europe/Simferopol, Europe/Skopje, Europe/Sofia, Europe/Stockholm, Europe/Tallinn, Europe/Tirane, Europe/Ulyanovsk, Europe/Vaduz, Europe/Vatican, Europe/Vienna, Europe/Vilnius, Europe/Volgograd, Europe/Warsaw, Europe/Zagreb, Europe/Zurich, Indian/Antananarivo, Indian/Chagos, Indian/Christmas, Indian/Cocos, Indian/Comoro, Indian/Kerguelen, Indian/Mahe, Indian/Maldives, Indian/Mauritius, Indian/Mayotte, Indian/Reunion, Pacific/Apia, Pacific/Auckland, Pacific/Bougainville, Pacific/Chatham, Pacific/Chuuk, Pacific/Easter, Pacific/Efate, Pacific/Fakaofo, Pacific/Fiji, Pacific/Funafuti, Pacific/Galapagos, Pacific/Gambier, Pacific/Guadalcanal, Pacific/Guam, Pacific/Honolulu, Pacific/Kiritimati, Pacific/Kosrae, Pacific/Kwajalein, Pacific/Majuro, Pacific/Marquesas, Pacific/Midway, Pacific/Nauru, Pacific/Niue, Pacific/Norfolk, Pacific/Noumea, Pacific/Pago_Pago, Pacific/Palau, Pacific/Pitcairn, Pacific/Pohnpei, Pacific/Port_Moresby, Pacific/Rarotonga, Pacific/Saipan, Pacific/Tahiti, Pacific/Tarawa, Pacific/Tongatapu, Pacific/Wake, Pacific/Wallis, UTC]
                  nullable: false
                wage_type:
                  $ref: '#/components/schemas/WageType'
                weekstart_monday:
                  description: 'Start week on Monday?'
                  type: boolean
                  nullable: false
                weekend_friday:
                  description: 'End week on Friday?'
                  type: boolean
                  nullable: false
                show_favorites:
                  type: boolean
                  nullable: false
                edit_lock:
                  description: 'The date after the co-worker is not allowed to edit his entries anymore. Can only be managed by owners, managers or worker with elevated access `manage_users_access`.'
                  type: string
                  format: date
                  example: '2023-02-28'
                  nullable: true
                edit_lock_dyn:
                  oneOf: [{ $ref: '#/components/schemas/EditLockDay' }]
                  nullable: true
                  description: 'Dynamic edit lock for this co-worker. Can only be managed by owners, managers or worker with elevated access `manage_users_access`.'
                  type: integer
                edit_lock_sync:
                  description: 'Can future changes to the company-wide edit lock overwrite the edit lock for this co-worker? Can only be managed by owners, managers or worker with elevated access `manage_users_access`.'
                  type: boolean
                  nullable: true
                work_time_edit_lock_days:
                  oneOf: [{ $ref: '#/components/schemas/WorkTimeEditLockDay' }]
                  nullable: true
                  description: 'Relative work time editing lock in days for the co-worker. Can only be managed by owners, managers or worker with elevated access `manage_users_access`.'
                  type: integer
                mail_to_user:
                  type: boolean
                  nullable: false
                start_date:
                  type: string
                  format: date
                  example: '2023-02-28'
                  nullable: false
                budget_notifications:
                  type: boolean
                  nullable: false
                default_holidays_count:
                  description: "Uses the company's default holiday count"
                  type: boolean
                  nullable: false
                default_target_hours:
                  description: "Uses the company's default target hours"
                  type: boolean
                  nullable: false
                work_time_regulations_id:
                  type: integer
                  minimum: 1
                  nullable: true
                default_work_time_regulation:
                  description: "Uses the company's default work time regulation"
                  type: boolean
                  nullable: false
                absence_managers_id:
                  type: array
                  items: { type: integer, minimum: 1, nullable: false }
                  maxItems: 500
                  minItems: 0
                  nullable: false
                access_groups_ids:
                  type: array
                  items: { type: integer, minimum: 1, nullable: false }
                  maxItems: 30
                  minItems: 0
                  nullable: false
                bill_service_id:
                  type: string
                  maxLength: 50
                  nullable: true
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/UserV3' }
                type: object
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiUsersV3Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    delete:
      tags:
        - User
      operationId: deleteUserByIdV3
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - success
                properties:
                  success: { title: Success, type: boolean, example: true }
                type: object
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiUsersV3Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  /v3/usersNonbusinessGroups:
    get:
      tags:
        - UserNonbusinessGroup
      operationId: getUsersNonbusinessGroupsV3
      parameters:
        -
          name: filter
          in: query
          required: false
          schema:
            properties:
              nonbusiness_groups_id:
                type: array
                items:
                  type: integer
                  minimum: 1
                  nullable: false
                maxItems: 500
                nullable: false
              users_id:
                type: array
                items:
                  type: integer
                  minimum: 1
                  nullable: false
                maxItems: 500
                nullable: false
            type: object
            nullable: false
        -
          name: page
          in: query
          required: false
          schema:
            type: integer
            format: int64
            minimum: 1
            example: 1
        -
          name: items_per_page
          in: query
          required: false
          schema:
            type: integer
            format: int64
            maximum: 1000
            minimum: 1
            example: 100
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - paging
                  - data
                properties:
                  paging: { required: [items_per_page, current_page, count_pages, count_items], properties: { items_per_page: { type: integer, format: int64, example: 1000 }, current_page: { type: integer, format: int64, example: 1 }, count_pages: { type: integer, format: int64, example: 1 }, count_items: { type: integer, format: int64, example: 4 } }, type: object }
                  data: { type: array, items: { $ref: '#/components/schemas/UsersNonbusinessGroupV3' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    post:
      tags:
        - UserNonbusinessGroup
      operationId: createUsersNonbusinessGroupV3
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - users_id
                - nonbusiness_groups_id
                - date_since
              properties:
                users_id:
                  type: integer
                  nullable: false
                nonbusiness_groups_id:
                  type: integer
                  nullable: false
                date_since:
                  type: string
                  format: date
                  example: '2023-02-28'
                  nullable: false
                date_until:
                  type: string
                  format: date
                  example: '2023-02-28'
                  nullable: true
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/UsersNonbusinessGroupV3' }
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiUsersNonbusinessGroupsV3Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  '/v3/usersNonbusinessGroups/{id}':
    get:
      tags:
        - UserNonbusinessGroup
      operationId: getUsersNonbusinessGroupByIdV3
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/UsersNonbusinessGroupV3' }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    put:
      tags:
        - UserNonbusinessGroup
      operationId: updateUsersNonbusinessGroupByIdV3
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                nonbusiness_groups_id:
                  type: integer
                  nullable: false
                date_since:
                  type: string
                  format: date
                  example: '2023-02-28'
                  nullable: false
                date_until:
                  type: string
                  format: date
                  example: '2023-02-28'
                  nullable: true
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/UsersNonbusinessGroupV3' }
                type: object
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiUsersNonbusinessGroupsV3Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    delete:
      tags:
        - UserNonbusinessGroup
      operationId: deleteUsersNonbusinessGroupByIdV3
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - success
                properties:
                  success: { title: Success, type: boolean, example: true }
                type: object
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiUsersNonbusinessGroupsV3Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  '/v3/workTimes/changeRequests/{id}/approve':
    post:
      tags:
        - WorkTime
      operationId: approveWorkTimesChangeRequestByIdV3
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - success
                properties:
                  success: { title: Success, type: boolean, example: true }
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '400':
          description: 'An error occurred'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponses'
      deprecated: false
  /v4/absences:
    get:
      tags:
        - Absence
      operationId: getAbsencesV4
      parameters:
        -
          name: filter
          in: query
          required: false
          schema:
            properties:
              year:
                type: array
                items:
                  type: integer
                  maximum: 2037
                  minimum: 2000
                  nullable: false
                maxItems: 500
                nullable: false
              users_id:
                type: array
                items:
                  type: integer
                  minimum: 1
                  nullable: false
                maxItems: 500
                nullable: false
              teams_id:
                type: array
                items:
                  type: integer
                  minimum: 1
                  nullable: true
                maxItems: 500
                nullable: false
              status:
                type: array
                items:
                  $ref: '#/components/schemas/AbsenceStatus'
                maxItems: 500
                nullable: false
              type:
                type: array
                items:
                  $ref: '#/components/schemas/AbsenceType'
                maxItems: 500
                nullable: false
              users_active:
                type: boolean
                nullable: false
            type: object
            nullable: false
        -
          name: scope
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/AbsenceScope'
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/AbsenceV4' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    post:
      tags:
        - Absence
      operationId: createAbsenceV4
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - date_since
                - type
              properties:
                date_since:
                  type: string
                  format: date
                  example: '2023-02-28'
                  nullable: false
                date_until:
                  type: string
                  format: date
                  example: '2023-02-28'
                  nullable: true
                type:
                  $ref: '#/components/schemas/AbsenceType'
                half_day:
                  type: boolean
                  nullable: false
                count_hours:
                  type: number
                  format: float
                  maximum: 1000
                  minimum: 0.01
                  nullable: false
                users_id:
                  type: integer
                  minimum: 1
                  nullable: false
                allow_override:
                  description: 'IDs of absences that may be shortened or deleted to avoid conflicts'
                  type: array
                  items: { type: integer, minimum: 1, nullable: false }
                  maxItems: 500
                  nullable: false
                status:
                  $ref: '#/components/schemas/AbsenceStatus'
                sick_note:
                  type: boolean
                  nullable: false
                note:
                  type: string
                  maxLength: 512
                  nullable: true
                public_note:
                  type: string
                  maxLength: 512
                  nullable: true
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/AbsenceV4' }
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiAbsencesV4Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  '/v4/absences/{id}':
    get:
      tags:
        - Absence
      operationId: getAbsenceByIdV4
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/AbsenceV4' }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    put:
      tags:
        - Absence
      operationId: updateAbsenceByIdV4
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                date_since:
                  type: string
                  format: date
                  example: '2023-02-28'
                  nullable: false
                date_until:
                  type: string
                  format: date
                  example: '2023-02-28'
                  nullable: false
                type:
                  $ref: '#/components/schemas/AbsenceType'
                half_day:
                  type: boolean
                  nullable: false
                count_hours:
                  type: number
                  format: float
                  maximum: 1000
                  minimum: 0.01
                  nullable: false
                allow_override:
                  description: 'IDs of absences that may be shortened or deleted to avoid conflicts'
                  type: array
                  items: { type: integer, minimum: 1, nullable: false }
                  maxItems: 500
                  nullable: false
                status:
                  $ref: '#/components/schemas/AbsenceStatus'
                sick_note:
                  type: boolean
                  nullable: false
                note:
                  type: string
                  maxLength: 512
                  nullable: true
                public_note:
                  type: string
                  maxLength: 512
                  nullable: true
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/AbsenceV4' }
                type: object
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiAbsencesV4Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    delete:
      tags:
        - Absence
      operationId: deleteAbsenceByIdV4
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - success
                properties:
                  success: { title: Success, type: boolean, example: true }
                type: object
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiAbsencesV4Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  /v4/lumpSumServices:
    get:
      tags:
        - LumpSumService
      operationId: getLumpSumServicesV4
      parameters:
        -
          name: filter
          in: query
          required: false
          schema:
            properties:
              active:
                type: boolean
                nullable: false
              fulltext:
                type: string
                nullable: false
            type: object
            nullable: false
        -
          name: sort
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/SortIdNameActive'
            nullable: false
        -
          name: page
          in: query
          required: false
          schema:
            type: integer
            format: int64
            minimum: 1
            example: 1
        -
          name: items_per_page
          in: query
          required: false
          schema:
            type: integer
            format: int64
            maximum: 5000
            minimum: 1
            example: 100
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - paging
                  - data
                properties:
                  paging: { required: [items_per_page, current_page, count_pages, count_items], properties: { items_per_page: { type: integer, format: int64, example: 1000 }, current_page: { type: integer, format: int64, example: 1 }, count_pages: { type: integer, format: int64, example: 1 }, count_items: { type: integer, format: int64, example: 4 } }, type: object }
                  data: { type: array, items: { $ref: '#/components/schemas/LumpSumServiceV4' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    post:
      tags:
        - LumpSumService
      operationId: createLumpSumServiceV4
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - name
                - price
              properties:
                name:
                  type: string
                  maxLength: 100
                  nullable: false
                price:
                  description: 'Price per unit'
                  type: number
                  format: float
                  maximum: 99999999.99
                  minimum: -99999999.99
                  nullable: false
                unit:
                  type: string
                  maxLength: 6
                  nullable: true
                active:
                  type: boolean
                  nullable: false
                number:
                  description: 'Lump sum service number'
                  type: string
                  maxLength: 50
                  nullable: true
                note:
                  description: 'Only visible for owners, managers or worker with elevated access `manage_services`'
                  type: string
                  maxLength: 1000
                  nullable: true
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/LumpSumServiceV4' }
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiLumpSumServicesV4Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  '/v4/lumpSumServices/{id}':
    get:
      tags:
        - LumpSumService
      operationId: getLumpSumServiceByIdV4
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/LumpSumServiceV4' }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    put:
      tags:
        - LumpSumService
      operationId: updateLumpSumServiceByIdV4
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  maxLength: 100
                  nullable: false
                price:
                  description: 'Price per unit'
                  type: number
                  format: float
                  maximum: 99999999.99
                  minimum: -99999999.99
                  nullable: false
                unit:
                  type: string
                  maxLength: 6
                  nullable: true
                active:
                  type: boolean
                  nullable: false
                number:
                  description: 'Lump sum service number'
                  type: string
                  maxLength: 50
                  nullable: true
                note:
                  description: 'Only visible for owners, managers or worker with elevated access `manage_services`'
                  type: string
                  maxLength: 1000
                  nullable: true
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/LumpSumServiceV4' }
                type: object
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiLumpSumServicesV4Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    delete:
      tags:
        - LumpSumService
      operationId: deleteLumpSumServiceByIdV4
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
        -
          name: dry_run
          in: query
          required: false
          schema:
            type: boolean
            nullable: false
        -
          name: force
          in: query
          required: false
          schema:
            type: boolean
            nullable: false
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - success
                properties:
                  success: { title: Success, type: boolean, example: true }
                type: object
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiLumpSumServicesV4Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  /v4/projects:
    get:
      tags:
        - Project
      operationId: getProjectsV4
      parameters:
        -
          name: filter
          in: query
          required: false
          schema:
            properties:
              active:
                type: boolean
                nullable: false
              customers_id:
                type: integer
                nullable: false
              fulltext:
                type: string
                nullable: false
            type: object
            nullable: false
        -
          name: sort
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/SortIdNameActive'
            nullable: false
        -
          name: scope
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/CustomerProjectScope'
        -
          name: page
          in: query
          required: false
          schema:
            type: integer
            format: int64
            minimum: 1
            example: 1
        -
          name: items_per_page
          in: query
          required: false
          schema:
            type: integer
            format: int64
            maximum: 5000
            minimum: 1
            example: 100
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - paging
                  - data
                properties:
                  paging: { required: [items_per_page, current_page, count_pages, count_items], properties: { items_per_page: { type: integer, format: int64, example: 1000 }, current_page: { type: integer, format: int64, example: 1 }, count_pages: { type: integer, format: int64, example: 1 }, count_items: { type: integer, format: int64, example: 4 } }, type: object }
                  data: { type: array, items: { $ref: '#/components/schemas/ProjectV4' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    post:
      tags:
        - Project
      operationId: createProjectV4
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - name
                - customers_id
              properties:
                name:
                  type: string
                  maxLength: 100
                  nullable: false
                customers_id:
                  type: integer
                  nullable: false
                active:
                  type: boolean
                  nullable: false
                number:
                  description: 'Freely selectable number for the project'
                  type: string
                  maxLength: 50
                  nullable: true
                billable_default:
                  type: boolean
                  nullable: false
                note:
                  type: string
                  maxLength: 1000
                  nullable: true
                deadline:
                  description: 'Date when the project will be completed automatically'
                  type: string
                  format: date
                  example: '2023-02-28'
                  nullable: true
                start_date:
                  description: 'Date when the project becomes available for time tracking'
                  type: string
                  format: date
                  example: '2023-02-28'
                  nullable: true
                budget:
                  properties: { monetary: { type: boolean, nullable: false }, hard: { type: boolean, nullable: false }, from_subprojects: { type: boolean, nullable: false }, amount: { type: number, format: float, maximum: 99999999, minimum: 0, nullable: true }, notification_thresholds: { type: array, items: { $ref: '#/components/schemas/Thresholds' }, nullable: false } }
                  type: object
                  nullable: true
                bill_service_id:
                  type: string
                  maxLength: 50
                  nullable: true
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/ProjectV4' }
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiProjectsV4Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  '/v4/projects/{id}':
    get:
      tags:
        - Project
      operationId: getProjectByIdV4
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/ProjectV4' }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    put:
      tags:
        - Project
      operationId: updateProjectByIdV4
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  maxLength: 100
                  nullable: false
                customers_id:
                  type: integer
                  nullable: false
                active:
                  type: boolean
                  nullable: false
                number:
                  description: 'Freely selectable number for the project'
                  type: string
                  maxLength: 50
                  nullable: true
                billable_default:
                  type: boolean
                  nullable: false
                note:
                  type: string
                  maxLength: 1000
                  nullable: true
                deadline:
                  description: 'Date when the project will be completed automatically'
                  type: string
                  format: date
                  example: '2023-02-28'
                  nullable: true
                start_date:
                  description: 'Date when the project becomes available for time tracking'
                  type: string
                  format: date
                  example: '2023-02-28'
                  nullable: true
                budget:
                  properties: { monetary: { type: boolean, nullable: false }, hard: { type: boolean, nullable: false }, from_subprojects: { type: boolean, nullable: false }, amount: { type: number, format: float, maximum: 99999999, minimum: 0, nullable: true }, notification_thresholds: { type: array, items: { $ref: '#/components/schemas/Thresholds' }, nullable: false } }
                  type: object
                  nullable: true
                bill_service_id:
                  type: string
                  maxLength: 50
                  nullable: true
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/ProjectV4' }
                type: object
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiProjectsV4Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    delete:
      tags:
        - Project
      operationId: deleteProjectByIdV4
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
        -
          name: dry_run
          in: query
          required: false
          schema:
            type: boolean
            nullable: false
        -
          name: force
          in: query
          required: false
          schema:
            type: boolean
            nullable: false
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - success
                properties:
                  success: { title: Success, type: boolean, example: true }
                type: object
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiProjectsV4Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  '/v4/projects/{id}/complete':
    put:
      tags:
        - Project
      operationId: completeProjectByIdV4
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - completed
              properties:
                completed:
                  type: boolean
                  nullable: false
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/ProjectV4' }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  /v4/services:
    get:
      tags:
        - Service
      operationId: getServicesV4
      parameters:
        -
          name: filter
          in: query
          required: false
          schema:
            properties:
              active:
                type: boolean
                nullable: false
              fulltext:
                type: string
                nullable: false
            type: object
            nullable: false
        -
          name: sort
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/SortIdNameActive'
            nullable: false
        -
          name: scope
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/ServiceScope'
        -
          name: page
          in: query
          required: false
          schema:
            type: integer
            format: int64
            minimum: 1
            example: 1
        -
          name: items_per_page
          in: query
          required: false
          schema:
            type: integer
            format: int64
            maximum: 5000
            minimum: 1
            example: 100
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - paging
                  - data
                properties:
                  paging: { required: [items_per_page, current_page, count_pages, count_items], properties: { items_per_page: { type: integer, format: int64, example: 1000 }, current_page: { type: integer, format: int64, example: 1 }, count_pages: { type: integer, format: int64, example: 1 }, count_items: { type: integer, format: int64, example: 4 } }, type: object }
                  data: { type: array, items: { $ref: '#/components/schemas/ServiceV4' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    post:
      tags:
        - Service
      operationId: createServiceV4
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - name
              properties:
                name:
                  type: string
                  maxLength: 100
                  nullable: false
                active:
                  type: boolean
                  nullable: false
                number:
                  description: 'Freely selectable number for the service.'
                  type: string
                  maxLength: 50
                  nullable: true
                note:
                  description: 'Only visible for owners, managers or worker with elevated access `manage_services`.'
                  type: string
                  maxLength: 1000
                  nullable: true
                bill_service_id:
                  description: 'Can only be set by owners, managers or worker with elevated access `manage_services` and if a billing application with services support is linked up.'
                  type: string
                  maxLength: 50
                  nullable: true
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/ServiceV4' }
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiServicesV4Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
  '/v4/services/{id}':
    get:
      tags:
        - Service
      operationId: getServiceByIdV4
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/ServiceV4' }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    put:
      tags:
        - Service
      operationId: updateServiceByIdV4
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  maxLength: 100
                  nullable: false
                active:
                  type: boolean
                  nullable: false
                number:
                  description: 'Freely selectable number for the service.'
                  type: string
                  maxLength: 50
                  nullable: true
                note:
                  description: 'Only visible for owners, managers or worker with elevated access `manage_services`.'
                  type: string
                  maxLength: 1000
                  nullable: true
                bill_service_id:
                  description: 'Can only be set by owners, managers or worker with elevated access `manage_services` and if a billing application with services support is linked up.'
                  type: string
                  maxLength: 50
                  nullable: true
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/ServiceV4' }
                type: object
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiServicesV4Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
    delete:
      tags:
        - Service
      operationId: deleteServiceByIdV4
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
        -
          name: dry_run
          in: query
          required: false
          schema:
            type: boolean
            nullable: false
        -
          name: force
          in: query
          required: false
          schema:
            type: boolean
            nullable: false
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                required:
                  - success
                properties:
                  success: { title: Success, type: boolean, example: true }
                type: object
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                required:
                  - errors
                properties:
                  errors: { type: array, items: { $ref: '#/components/schemas/ApiServicesV4Errors' } }
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrors'
      deprecated: false
components:
  schemas:
    AbsenceCollision:
      required:
        - collidingAbsences
      properties:
        collidingAbsences:
          type: array
          items:
            type: integer
      type: object
    AbsenceCollisionError:
      title: 'Absence collision error'
      properties:
        type:
          type: string
          example: AbsenceCollision
        message:
          type: string
          nullable: true
        path:
          type: string
          nullable: true
        details:
          $ref: '#/components/schemas/AbsenceCollision'
      type: object
    AbsenceHasToBeDeclinedError:
      title: 'Absence has to be declined error'
      properties:
        type:
          type: string
          example: AbsenceHasToBeDeclined
        message:
          type: string
          example: 'The absence has to be declined first.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    AbsenceScope:
      title: 'Absence scope'
      description: "Possible values:\n- `manageableAbsences`: ManageableAbsences\n- `viewableAbsences`: ViewableAbsences"
      type: string
      enum:
        - manageableAbsences
        - viewableAbsences
      nullable: false
      x-enumNames:
        - ManageableAbsences
        - ViewableAbsences
    AbsenceStatus:
      title: 'Absence status'
      description: "Possible values:\n- `0`: Enquired\n- `1`: Approved\n- `2`: Declined\n- `3`: ApprovalCancelled\n- `4`: Cancelled"
      type: integer
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
      nullable: false
      x-enumNames:
        - Enquired
        - Approved
        - Declined
        - ApprovalCancelled
        - Cancelled
    AbsenceType:
      title: 'Absence type'
      description: "Possible values:\n- `1`: Holiday from the quota\n- `2`: Special leaves\n- `3`: Reduction of overtime\n- `4`: Sick day\n- `5`: Sick day of a child\n- `6`: School / further education\n- `7`: Maternity protection\n- `8`: Home office (planned hours get applied)\n- `9`: Work out of office (planned hours get applied)\n- `10`: Special leaves (unpaid)\n- `11`: Sick day (unpaid)\n- `12`: Sick day of a child (unpaid)\n- `13`: Quarantine (work not possible)\n- `14`: Military / alternative service\n- `15`: Sick day (sickness benefit)"
      type: integer
      enum:
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        - 7
        - 8
        - 9
        - 10
        - 11
        - 12
        - 13
        - 14
        - 15
      nullable: false
      x-enumNames:
        - RegularHoliday
        - SpecialLeave
        - OverTimeReduction
        - SickSelf
        - SickChild
        - School
        - MaternityProtection
        - HomeOffice
        - OutOfOffice
        - SpecialLeaveUnpaid
        - SickSelfUnpaid
        - SickChildUnpaid
        - Quarantine
        - MilitaryService
        - SickSelfWithCertificate
    AbsenceV4:
      required:
        - id
        - users_id
        - date_since
        - date_until
        - status
        - public_note
        - count_days
      properties:
        id:
          type: integer
          nullable: false
        users_id:
          type: integer
          nullable: false
        date_since:
          type: string
          format: date
          nullable: false
        date_until:
          type: string
          format: date
          nullable: true
        type:
          $ref: '#/components/schemas/AbsenceType'
        status:
          $ref: '#/components/schemas/AbsenceStatus'
        note:
          description: 'Only with access rights for absence administration or in case of own absences'
          type: string
          nullable: true
        public_note:
          type: string
          nullable: true
        sick_note:
          description: 'Only with access rights for absence administration or in case of own absences. Only for types 4 (SickSelf) and 5 (SickChild). Null in case of other absences.'
          type: boolean
          nullable: true
        count_days:
          title: 'Amount of absence days'
          description: 'Null in case of overtime reduction.'
          type: number
          format: float
          nullable: true
        count_hours:
          title: 'Amount of hours of overtime reduction'
          description: 'Only with access rights for absence administration or in case of own absences. Null in case of other absences.'
          type: number
          format: float
          nullable: true
        date_enquired:
          description: 'Only with access rights for absence administration or in case of own absences'
          type: string
          format: date
          nullable: true
        date_approved:
          description: 'Only with access rights for absence administration or in case of own absences'
          type: string
          format: date
          nullable: true
        approved_by:
          title: 'ID of the user who has approved, declined or cancelled the request'
          description: 'Only with access rights for absence administration or in case of own absences'
          type: integer
          nullable: true
      type: object
    AccessGroupV2:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          maxLength: 100
          example: Marketing
        users_ids:
          description: 'IDs of the access group members'
          type: array
          items:
            type: integer
            format: int64
          example:
            - 1
      type: object
    AccessType:
      title: 'Access type'
      description: "Possible values:\n- `add`: AddData\n- `report`: SeeReports\n- `edit`: EditReports"
      type: string
      enum:
        - add
        - report
        - edit
      nullable: false
      x-enumNames:
        - AddData
        - SeeReports
        - EditReports
    ApiAccessGroupsServicesGeneralV2_AccessTypeForPut:
      title: 'Access type for put'
      description: "Possible values:\n- `add`: AddData"
      type: string
      enum:
        - add
      nullable: false
      x-enumNames:
        - AddData
    ApiAccessGroupsServicesV2_AccessTypeForPut:
      title: 'Access type for put'
      description: "Possible values:\n- `add`: AddData"
      type: string
      enum:
        - add
      nullable: false
      x-enumNames:
        - AddData
    AccessValue:
      title: 'Access value'
      description: "Possible values:\n- `0`: NoAccess\n- `1`: FullAccess\n- `2`: CustomAccess"
      type: integer
      enum:
        - 0
        - 1
        - 2
      nullable: false
      x-enumNames:
        - NoAccess
        - FullAccess
        - CustomAccess
    ApiAccessGroupsProjectsV2_AccessValueForPut:
      title: 'Access value for put'
      description: "Possible values:\n- `0`: NoAccess\n- `1`: FullAccess"
      type: integer
      enum:
        - 0
        - 1
      nullable: false
      x-enumNames:
        - NoAccess
        - FullAccess
    ApiAccessGroupsServicesV2_AccessValueForPut:
      title: 'Access value for put'
      description: "Possible values:\n- `0`: NoAccess\n- `1`: FullAccess"
      type: integer
      enum:
        - 0
        - 1
      nullable: false
      x-enumNames:
        - NoAccess
        - FullAccess
    AggregatesUsersMeTypedPropertyAbsenceManagerIdV2:
      required:
        - value
      properties:
        value:
          type: integer
          format: int64
          nullable: false
      type: object
    AggregatesUsersMeV2:
      required:
        - user
        - company
        - worktime_regulation
      properties:
        user:
          $ref: '#/components/schemas/UserV1'
        company:
          $ref: '#/components/schemas/CompanyV1'
        worktime_regulation:
          oneOf:
            -
              $ref: '#/components/schemas/WorkTimeRegulationV3'
          nullable: true
      type: object
    AllowedValues:
      required:
        - allowedValues
      properties:
        allowedValues:
          type: array
          items: {  }
      type: object
    ApiAbsencesV4Errors:
      title: 'Api absences v4 errors'
      required:
        - error
      properties:
        error:
          title: Errors
          type: object
          anyOf:
            -
              $ref: '#/components/schemas/AbsenceHasToBeDeclinedError'
            -
              $ref: '#/components/schemas/AbsenceCollisionError'
            -
              $ref: '#/components/schemas/EmptyError'
            -
              $ref: '#/components/schemas/FieldsShouldBeEmptyError'
            -
              $ref: '#/components/schemas/HalfDayAbsenceTooLongError'
            -
              $ref: '#/components/schemas/FieldsShouldBeEmptyError'
            -
              $ref: '#/components/schemas/EmptyError'
            -
              $ref: '#/components/schemas/StatusIsForbiddenError'
            -
              $ref: '#/components/schemas/UntilMustBeInSameYearError'
            -
              $ref: '#/components/schemas/UntilBeforeSinceIsForbiddenError'
            -
              $ref: '#/components/schemas/UserIsNotManageableError'
      type: object
    ApiAccessGroupsCustomersGeneralV2Errors:
      title: 'Api access groups customers general v2 errors'
      required:
        - error
      properties:
        error:
          title: Errors
          type: object
          anyOf:
            -
              $ref: '#/components/schemas/ForbiddenChangeToCustomAccessError'
            -
              $ref: '#/components/schemas/ForbiddenChangeToCustomAccessError'
            -
              $ref: '#/components/schemas/ForbiddenChangeToCustomAccessError'
            -
              $ref: '#/components/schemas/BlockingAccessDependenciesError'
      type: object
    ApiAccessGroupsServicesGeneralV2Errors:
      title: 'Api access groups services general v2 errors'
      required:
        - error
      properties:
        error:
          title: Errors
          type: object
          anyOf:
            -
              $ref: '#/components/schemas/ForbiddenChangeToCustomAccessError'
      type: object
    ApiAccessGroupsV2Errors:
      title: 'Api access groups v2 errors'
      required:
        - error
      properties:
        error:
          title: Errors
          type: object
          anyOf:
            -
              $ref: '#/components/schemas/ResourceConflictFoundError'
            -
              $ref: '#/components/schemas/RelationsPreventDeletionError'
            -
              $ref: '#/components/schemas/ResourcesNotFoundError'
            -
              $ref: '#/components/schemas/UsersExceedAccessGroupLimitError'
      type: object
    ApiCustomersV3Errors:
      title: 'Api customers v3 errors'
      required:
        - error
      properties:
        error:
          title: Errors
          type: object
          anyOf:
            -
              $ref: '#/components/schemas/UnexpectedValueError'
            -
              $ref: '#/components/schemas/RelationsPreventDeletionError'
            -
              $ref: '#/components/schemas/HasToBeInactiveError'
            -
              $ref: '#/components/schemas/ArchiveCompanyDefaultIsNotAllowedError'
            -
              $ref: '#/components/schemas/CannotModifyDemoDataError'
            -
              $ref: '#/components/schemas/ResourceConflictFoundError'
            -
              $ref: '#/components/schemas/RelationsPreventDeletionError'
            -
              $ref: '#/components/schemas/RunningEntriesPreventDeletionError'
      type: object
    ApiErrors:
      properties:
        type:
          description: 'Unique identifier of the error'
          type: string
          example: General
        message:
          description: 'Textual error description'
          type: string
          example: 'The requested resource could not be found.'
        details:
          description: 'Additional error details if necessary'
          type: object
          example: null
          nullable: true
        path:
          type: string
          nullable: true
      type: object
    ApiHolidaysCarryV3Errors:
      title: 'Api holidays carry v3 errors'
      required:
        - error
      properties:
        error:
          title: Errors
          type: object
          anyOf:
            -
              $ref: '#/components/schemas/DuplicateEntryForUserAndYearError'
            -
              $ref: '#/components/schemas/ResourceNotFoundError'
      type: object
    ApiHolidaysQuotaV2Errors:
      title: 'Api holidays quota v2 errors'
      required:
        - error
      properties:
        error:
          title: Errors
          type: object
          anyOf:
            -
              $ref: '#/components/schemas/FieldsShouldBeEmptyError'
            -
              $ref: '#/components/schemas/IsDefaultHolidaysCountError'
            -
              $ref: '#/components/schemas/DuplicateEntryForUserAndYearError'
            -
              $ref: '#/components/schemas/ResourceNotFoundError'
            -
              $ref: '#/components/schemas/EndBeforeStartError'
      type: object
    ApiLumpSumServicesV4Errors:
      title: 'Api lump sum services v4 errors'
      required:
        - error
      properties:
        error:
          title: Errors
          type: object
          anyOf:
            -
              $ref: '#/components/schemas/HasToBeInactiveError'
            -
              $ref: '#/components/schemas/ResourceConflictFoundError'
            -
              $ref: '#/components/schemas/RelationsPreventDeletionError'
            -
              $ref: '#/components/schemas/RunningEntriesPreventDeletionError'
      type: object
    ApiNonbusinessDaysV2Errors:
      title: 'Api nonbusiness days v2 errors'
      required:
        - error
      properties:
        error:
          title: Errors
          type: object
          anyOf:
            -
              $ref: '#/components/schemas/ResourceConflictFoundError'
            -
              $ref: '#/components/schemas/ResourceNotFoundError'
            -
              $ref: '#/components/schemas/ResourceNotFoundError'
            -
              $ref: '#/components/schemas/InvalidDateError'
            -
              $ref: '#/components/schemas/ResourceConflictFoundError'
            -
              $ref: '#/components/schemas/InvalidCombinationError'
            -
              $ref: '#/components/schemas/InvalidCombinationError'
            -
              $ref: '#/components/schemas/InvalidCombinationError'
      type: object
    ApiNonbusinessGroupsV2Errors:
      title: 'Api nonbusiness groups v2 errors'
      required:
        - error
      properties:
        error:
          title: Errors
          type: object
          anyOf:
            -
              $ref: '#/components/schemas/ResourceConflictFoundError'
            -
              $ref: '#/components/schemas/DeleteCompanyDefaultIsNotAllowedError'
            -
              $ref: '#/components/schemas/RelationsPreventDeletionError'
      type: object
    ApiOvertimeCarryV3Errors:
      title: 'Api overtime carry v3 errors'
      required:
        - error
      properties:
        error:
          title: Errors
          type: object
          anyOf:
            -
              $ref: '#/components/schemas/DuplicateEntryForUserAndYearError'
            -
              $ref: '#/components/schemas/ResourceNotFoundError'
      type: object
    ApiOvertimeReductionsV3Errors:
      title: 'Api overtime reductions v3 errors'
      required:
        - error
      properties:
        error:
          title: Errors
          type: object
          anyOf:
            -
              $ref: '#/components/schemas/ResourceNotFoundError'
      type: object
    ApiProjectsV4Errors:
      title: 'Api projects v4 errors'
      required:
        - error
      properties:
        error:
          title: Errors
          type: object
          anyOf:
            -
              $ref: '#/components/schemas/BilledMoneyCanOnlyBeSetWithHardBudgetError'
            -
              $ref: '#/components/schemas/BilledCanOnlyBeSetWithHourBudgetError'
            -
              $ref: '#/components/schemas/UnexpectedValueError'
            -
              $ref: '#/components/schemas/FieldsShouldBeEmptyError'
            -
              $ref: '#/components/schemas/BudgetTotalBelowSubprojectBudgetSumError'
            -
              $ref: '#/components/schemas/EmptyError'
            -
              $ref: '#/components/schemas/CannotChangeBudgetSourceBecauseOfSubprojectsError'
            -
              $ref: '#/components/schemas/CannotRemoveBudgetBecauseOfSubprojectBudgetsError'
            -
              $ref: '#/components/schemas/CannotChangeBudgetCommitmentBecauseOfCompletedSubprojectsError'
            -
              $ref: '#/components/schemas/CannotChangeBudgetTypeBecauseOfSubprojectsError'
            -
              $ref: '#/components/schemas/CannotModifyDemoDataError'
            -
              $ref: '#/components/schemas/CompletionIsForbiddenBySubprojectCompletionError'
            -
              $ref: '#/components/schemas/ResourceNotFoundError'
            -
              $ref: '#/components/schemas/IllegalChangeForCompletedProjectError'
            -
              $ref: '#/components/schemas/CompletionIsForbiddenBySubprojectBudgetError'
            -
              $ref: '#/components/schemas/ProjectCompletionNoBillableEntriesError'
            -
              $ref: '#/components/schemas/ProjectCompletionRunningEntriesError'
            -
              $ref: '#/components/schemas/HasToBeInactiveError'
            -
              $ref: '#/components/schemas/ProjectCompletionTooManyLumpSumsError'
            -
              $ref: '#/components/schemas/ResourceConflictFoundError'
            -
              $ref: '#/components/schemas/RelationsPreventDeletionError'
            -
              $ref: '#/components/schemas/RunningEntriesPreventDeletionError'
            -
              $ref: '#/components/schemas/EmptyError'
            -
              $ref: '#/components/schemas/ProjectDeadlineIsNotBeforeProjectStartError'
            -
              $ref: '#/components/schemas/ProjectDeadlineIsNotInPastError'
      type: object
    ApiServicesV4Errors:
      title: 'Api services v4 errors'
      required:
        - error
      properties:
        error:
          title: Errors
          type: object
          anyOf:
            -
              $ref: '#/components/schemas/UnexpectedValueError'
            -
              $ref: '#/components/schemas/HasToBeInactiveError'
            -
              $ref: '#/components/schemas/ArchiveCompanyDefaultIsNotAllowedError'
            -
              $ref: '#/components/schemas/ResourceConflictFoundError'
            -
              $ref: '#/components/schemas/RelationsPreventDeletionError'
            -
              $ref: '#/components/schemas/RunningEntriesPreventDeletionError'
      type: object
    ApiSubprojectsV3Errors:
      title: 'Api subprojects v3 errors'
      required:
        - error
      properties:
        error:
          title: Errors
          type: object
          anyOf:
            -
              $ref: '#/components/schemas/UnexpectedValueError'
            -
              $ref: '#/components/schemas/SubprojectBudgetCommitmentNotEditableForBudgetSourceError'
            -
              $ref: '#/components/schemas/NotBetweenError'
            -
              $ref: '#/components/schemas/SubprojectBudgetTypeNotEditableForBudgetSourceError'
            -
              $ref: '#/components/schemas/RequiresBudgetError'
            -
              $ref: '#/components/schemas/SubprojectBudgetModificationIsProhibitedBecauseProjectIsCompletedError'
            -
              $ref: '#/components/schemas/SubprojectBudgetModificationIsProhibitedBecauseItIsCompletedError'
            -
              $ref: '#/components/schemas/SubprojectCompletionNoBillableEntriesError'
            -
              $ref: '#/components/schemas/SubprojectCompletionRunningEntriesError'
            -
              $ref: '#/components/schemas/SubprojectIsCompletedError'
            -
              $ref: '#/components/schemas/SubprojectCreationWithBudgetIsProhibitedError'
            -
              $ref: '#/components/schemas/SubprojectCompletionTooManyLumpSumsError'
            -
              $ref: '#/components/schemas/ResourceConflictFoundError'
            -
              $ref: '#/components/schemas/RelationsPreventDeletionError'
            -
              $ref: '#/components/schemas/RunningEntriesPreventDeletionError'
            -
              $ref: '#/components/schemas/BudgetTotalError'
            -
              $ref: '#/components/schemas/ResourceNotFoundError'
            -
              $ref: '#/components/schemas/ProjectIsCompletedError'
            -
              $ref: '#/components/schemas/SubprojectCompletionWithHardBudgetIsProhibitedForCompletedProjectsError'
            -
              $ref: '#/components/schemas/BudgetTotalExceedsAbsoluteMaximumError'
            -
              $ref: '#/components/schemas/ShouldNotHaveBudgetError'
            -
              $ref: '#/components/schemas/SubprojectDeadlineIsNotBeforeProjectStartError'
            -
              $ref: '#/components/schemas/SubprojectDeadlineIsNotInPastError'
      type: object
    ApiTeamsV3Errors:
      title: 'Api teams v3 errors'
      required:
        - error
      properties:
        error:
          title: Errors
          type: object
          anyOf:
            -
              $ref: '#/components/schemas/ResourceNotFoundError'
            -
              $ref: '#/components/schemas/HasToBeActiveError'
            -
              $ref: '#/components/schemas/ResourceConflictFoundError'
            -
              $ref: '#/components/schemas/RelationsPreventDeletionError'
            -
              $ref: '#/components/schemas/ForbiddenError'
      type: object
    ApiUsersNonbusinessGroupsV3Errors:
      title: 'Api users nonbusiness groups v3 errors'
      required:
        - error
      properties:
        error:
          title: Errors
          type: object
          anyOf:
            -
              $ref: '#/components/schemas/ResourceNotFoundError'
            -
              $ref: '#/components/schemas/UsersNonbusinessGroupsCollisionError'
            -
              $ref: '#/components/schemas/EndBeforeStartError'
            -
              $ref: '#/components/schemas/ResourceNotFoundError'
      type: object
    ApiUsersV3Errors:
      title: 'Api users v3 errors'
      required:
        - error
      properties:
        error:
          title: Errors
          type: object
          anyOf:
            -
              $ref: '#/components/schemas/ResourcesInactiveError'
            -
              $ref: '#/components/schemas/ResourcesNotFoundError'
            -
              $ref: '#/components/schemas/ResourcesNotFoundError'
            -
              $ref: '#/components/schemas/UnexpectedValueError'
            -
              $ref: '#/components/schemas/ResourceNotFoundError'
            -
              $ref: '#/components/schemas/InvalidCombinationError'
            -
              $ref: '#/components/schemas/EmailNotAvailableError'
            -
              $ref: '#/components/schemas/EmailNotAvailableError'
            -
              $ref: '#/components/schemas/EmailNotAvailableError'
            -
              $ref: '#/components/schemas/InvalidCombinationError'
            -
              $ref: '#/components/schemas/InvalidCombinationError'
            -
              $ref: '#/components/schemas/ResourceConflictFoundError'
            -
              $ref: '#/components/schemas/InvalidCombinationError'
            -
              $ref: '#/components/schemas/HasToBeInactiveError'
            -
              $ref: '#/components/schemas/MaxUsersOfPlanTypeReachedError'
            -
              $ref: '#/components/schemas/MaxUsersReachedError'
            -
              $ref: '#/components/schemas/ResourceConflictFoundError'
            -
              $ref: '#/components/schemas/RelationsPreventDeletionError'
            -
              $ref: '#/components/schemas/RunningEntriesPreventDeletionError'
            -
              $ref: '#/components/schemas/RunningEntriesPreventArchivingError'
            -
              $ref: '#/components/schemas/SsoPreventsDeactivationError'
            -
              $ref: '#/components/schemas/ForbiddenError'
            -
              $ref: '#/components/schemas/ForbiddenError'
            -
              $ref: '#/components/schemas/BossCannotBeArchivedError'
            -
              $ref: '#/components/schemas/ForbiddenError'
            -
              $ref: '#/components/schemas/UserCannotDeleteThemselvesError'
            -
              $ref: '#/components/schemas/ForbiddenError'
            -
              $ref: '#/components/schemas/OnlyOwnerCanDeleteOwnerError'
            -
              $ref: '#/components/schemas/ForbiddenError'
            -
              $ref: '#/components/schemas/ForbiddenError'
            -
              $ref: '#/components/schemas/ForbiddenError'
            -
              $ref: '#/components/schemas/ForbiddenError'
            -
              $ref: '#/components/schemas/ForbiddenError'
            -
              $ref: '#/components/schemas/ForbiddenError'
            -
              $ref: '#/components/schemas/ForbiddenError'
            -
              $ref: '#/components/schemas/ForbiddenError'
            -
              $ref: '#/components/schemas/SsoPreventsDowngradeError'
            -
              $ref: '#/components/schemas/ForbiddenValueError'
            -
              $ref: '#/components/schemas/ResourceConflictFoundError'
            -
              $ref: '#/components/schemas/ResourceNotFoundError'
            -
              $ref: '#/components/schemas/InvalidCombinationError'
            -
              $ref: '#/components/schemas/ForbiddenError'
            -
              $ref: '#/components/schemas/ForbiddenError'
            -
              $ref: '#/components/schemas/InvalidCombinationError'
            -
              $ref: '#/components/schemas/InvalidCombinationError'
            -
              $ref: '#/components/schemas/ResourceNotFoundError'
      type: object
    ArchiveCompanyDefaultIsNotAllowedError:
      title: 'Archive company default is not allowed error'
      properties:
        type:
          type: string
          example: ArchiveCompanyDefaultIsNotAllowed
        message:
          type: string
          example: 'It is not allowed to archive an item which is company default.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    Billable:
      title: Billable
      description: "Possible values:\n- `0`: NotBillable\n- `1`: Billable\n- `2`: Billed\n- `12`: BillableOrBilled"
      type: integer
      enum:
        - 0
        - 1
        - 2
        - 12
      nullable: false
      x-enumNames:
        - NotBillable
        - Billable
        - Billed
        - BillableOrBilled
    BillableDistinct:
      title: 'Billable distinct'
      description: "Possible values:\n- `0`: NotBillable\n- `1`: Billable\n- `2`: Billed"
      type: integer
      enum:
        - 0
        - 1
        - 2
      nullable: false
      x-enumNames:
        - NotBillable
        - Billable
        - Billed
    BilledCanOnlyBeSetWithHourBudgetError:
      title: 'Billed can only be set with hour budget error'
      properties:
        type:
          type: string
          example: BilledCanOnlyBeSetWithHourBudget
        message:
          type: string
          example: 'Field can only be set for projects with hours as budget. Otherwise it is determined automatically based on the billed amount.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    BilledMoneyCanOnlyBeSetWithHardBudgetError:
      title: 'Billed money can only be set with hard budget error'
      properties:
        type:
          type: string
          example: BilledMoneyCanOnlyBeSetWithHardBudget
        message:
          type: string
          example: "The project does not have a hard budget so that the billed amount can't be set. You have to set the single entries to billed."
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    BlockingAccessDependenciesError:
      title: 'Blocking access dependencies error'
      properties:
        type:
          type: string
          example: BlockingAccessDependencies
        message:
          type: string
          example: 'Blocking dependencies need to be removed beforehand.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          $ref: '#/components/schemas/BlockingAccessDependencies'
      type: object
    BossCannotBeArchivedError:
      title: 'Boss cannot be archived error'
      properties:
        type:
          type: string
          example: BossCannotBeArchived
        message:
          type: string
          example: 'Users who are bosses or team leaders cannot be archived.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    BudgetOption:
      title: 'Budget option'
      description: "Possible values:\n- `rep_filter_budget_strict`: Strict\n- `rep_filter_budget_strict_completed`: StrictCompleted\n- `rep_filter_budget_strict_incomplete`: StrictIncomplete\n- `rep_filter_budget_soft`: Soft\n- `rep_filter_budget_soft_completed`: SoftCompleted\n- `rep_filter_budget_soft_incomplete`: SoftIncomplete\n- `rep_filter_budget_without`: Without\n- `rep_filter_budget_without_strict`: WithoutStrict"
      type: string
      enum:
        - rep_filter_budget_strict
        - rep_filter_budget_strict_completed
        - rep_filter_budget_strict_incomplete
        - rep_filter_budget_soft
        - rep_filter_budget_soft_completed
        - rep_filter_budget_soft_incomplete
        - rep_filter_budget_without
        - rep_filter_budget_without_strict
      nullable: false
      x-enumNames:
        - Strict
        - StrictCompleted
        - StrictIncomplete
        - Soft
        - SoftCompleted
        - SoftIncomplete
        - Without
        - WithoutStrict
    BudgetSource:
      title: 'Budget source'
      description: "Possible values:\n- `0`: NoBudget\n- `1`: EnterBudget\n- `2`: GetBudgetThroughSubprojects\n- `3`: Interval"
      type: integer
      enum:
        - 0
        - 1
        - 2
        - 3
      nullable: false
      x-enumNames:
        - NoBudget
        - EnterBudget
        - GetBudgetThroughSubprojects
        - Interval
    BudgetTotalBelowSubprojectBudgetSumError:
      title: 'Budget total below subproject budget sum error'
      properties:
        type:
          type: string
          example: BudgetTotalBelowSubprojectBudgetSum
        message:
          type: string
          example: 'The project budget may not fall below the total budget of all subprojects.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          $ref: '#/components/schemas/NotBetween'
      type: object
    BudgetTotalError:
      title: 'Budget total error'
      properties:
        type:
          type: string
          example: BudgetTotal
        message:
          type: string
          example: 'The total budget of all subprojects may not exceed the project budget.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          $ref: '#/components/schemas/BudgetTotalErrorDetails'
      type: object
    BudgetTotalExceedsAbsoluteMaximumError:
      title: 'Budget total exceeds absolute maximum error'
      properties:
        type:
          type: string
          example: BudgetTotalExceedsAbsoluteMaximum
        message:
          type: string
          example: 'The total budget of all subprojects may not exceed the threshold of 99999999.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          $ref: '#/components/schemas/NotBetween'
      type: object
    CannotChangeBudgetCommitmentBecauseOfCompletedSubprojectsError:
      title: 'Cannot change budget commitment because of completed subprojects error'
      properties:
        type:
          type: string
          example: CannotChangeBudgetCommitmentBecauseOfCompletedSubprojects
        message:
          type: string
          example: 'You cannot change the budget commitment as long as there are completed subprojects.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    CannotChangeBudgetSourceBecauseOfSubprojectsError:
      title: 'Cannot change budget source because of subprojects error'
      properties:
        type:
          type: string
          example: BudgetSourceIsNotChangedFromIntervalWhenSubprojectsExist
        message:
          type: string
          example: 'You cannot change the budget source of interval projects as long as there are subprojects.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    CannotChangeBudgetTypeBecauseOfSubprojectsError:
      title: 'Cannot change budget type because of subprojects error'
      properties:
        type:
          type: string
          example: CannotChangeBudgetTypeBecauseOfSubprojects
        message:
          type: string
          example: 'You cannot change the budget type (hard / should-be value and money / time) as long as there are subprojects.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    CannotModifyDemoDataError:
      title: 'Cannot modify demo data error'
      properties:
        type:
          type: string
          example: CannotModifyDemoData
        message:
          type: string
          example: 'You must not edit demo data.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    CannotRemoveBudgetBecauseOfSubprojectBudgetsError:
      title: 'Cannot remove budget because of subproject budgets error'
      properties:
        type:
          type: string
          example: CannotRemoveBudgetBecauseOfSubprojectBudgets
        message:
          type: string
          example: 'You cannot remove the budget as long as there are subprojects with budgets.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    ChangeRequestIntervalType:
      title: 'Change request interval type'
      description: "Possible values:\n- `1`: Added\n- `2`: Removed"
      type: integer
      enum:
        - 1
        - 2
      nullable: false
      x-enumNames:
        - Added
        - Removed
    ChangeRequestStatus:
      title: 'Change request status'
      description: "Possible values:\n- `1`: Requested\n- `2`: Declined"
      type: integer
      enum:
        - 1
        - 2
      nullable: false
      x-enumNames:
        - Requested
        - Declined
    ClockStartStopV2:
      required:
        - running
        - stopped
        - current_time
        - stopped_has_been_truncated
      properties:
        running:
          oneOf:
            -
              $ref: '#/components/schemas/EntryV2'
          nullable: true
          type: object
        stopped:
          oneOf:
            -
              $ref: '#/components/schemas/EntryV2'
          nullable: true
          type: object
        current_time:
          type: string
          format: date-time
          example: '2023-02-28T00:00:00Z'
        stopped_has_been_truncated:
          title: 'Stopped entry has been shortened in order to comply with maximum duration of 24h'
          type: boolean
        additional_message:
          title: 'Error Message'
          type: string
      type: object
    ClockV2:
      required:
        - running
        - stopped
        - current_time
      properties:
        running:
          oneOf:
            -
              $ref: '#/components/schemas/EntryV2'
          nullable: true
          type: object
        stopped:
          oneOf:
            -
              $ref: '#/components/schemas/EntryV2'
          nullable: true
          type: object
        current_time:
          type: string
          format: date-time
          example: '2023-02-28T00:00:00Z'
      type: object
    CompanyTargetHoursDefaultNodeV1:
      required:
        - monday
        - tuesday
        - wednesday
        - thursday
        - friday
        - saturday
        - sunday
      properties:
        monday:
          type: number
          format: float
          nullable: false
        tuesday:
          type: number
          format: float
          nullable: false
        wednesday:
          type: number
          format: float
          nullable: false
        thursday:
          type: number
          format: float
          nullable: false
        friday:
          type: number
          format: float
          nullable: false
        saturday:
          type: number
          format: float
          nullable: false
        sunday:
          type: number
          format: float
          nullable: false
      type: object
    CompanyV1:
      required:
        - id
        - name
        - timezone_default
        - currency
        - allow_entries_text_multiline
        - allow_entries_for_customers
        - allow_entry_overlaps
        - force_linked_entry_times
        - default_customers_id
        - default_services_id
        - module_absence
        - module_work_time
        - module_targethours
        - module_target_hours
        - module_userreports
        - module_user_reports
        - module_project_times
        - module_entries_texts
        - nonbusiness_group_default
        - onboarding_complete
        - worktime_regulation_default
        - worktime_evaluate_regulations_since
        - worktime_force_breaks
        - holidays_count_default
        - absence_reduces_target_hours
        - compensate_day_default
        - compensate_month_default
        - target_hours_default
      properties:
        id:
          type: integer
          format: int64
          nullable: false
        name:
          type: string
          nullable: false
        timezone_default:
          type: string
          nullable: false
        currency:
          type: string
          nullable: true
        allow_entries_text_multiline:
          type: boolean
          nullable: false
        allow_entries_for_customers:
          type: boolean
          nullable: false
        allow_entry_overlaps:
          type: boolean
          nullable: false
        force_linked_entry_times:
          type: boolean
          nullable: false
        default_customers_id:
          type: integer
          format: int64
          nullable: true
        default_services_id:
          type: integer
          format: int64
          nullable: true
        module_absence:
          type: boolean
          nullable: false
        module_work_time:
          type: boolean
          nullable: false
        module_targethours:
          type: boolean
          nullable: false
        module_target_hours:
          type: boolean
          nullable: false
        module_userreports:
          type: boolean
          nullable: false
        module_user_reports:
          type: boolean
          nullable: false
        module_project_times:
          type: boolean
          nullable: false
        module_entries_texts:
          type: boolean
          nullable: false
        nonbusiness_group_default:
          type: integer
          format: int64
          nullable: true
        onboarding_complete:
          type: boolean
          nullable: false
        worktime_regulation_default:
          type: integer
          format: int64
          nullable: true
        worktime_evaluate_regulations_since:
          type: string
          nullable: true
        worktime_force_breaks:
          type: integer
          format: int64
          nullable: false
        holidays_count_default:
          type: number
          format: float
          nullable: false
        absence_reduces_target_hours:
          type: boolean
          nullable: false
        compensate_day_default:
          type: number
          format: float
          nullable: false
        compensate_month_default:
          type: number
          format: float
          nullable: false
        target_hours_default:
          $ref: '#/components/schemas/CompanyTargetHoursDefaultNodeV1'
      type: object
    CompletionIsForbiddenBySubprojectBudgetError:
      title: 'Completion is forbidden by subproject budget error'
      properties:
        type:
          type: string
          example: CompletionIsForbiddenBySubprojectBudget
        message:
          type: string
          example: "Project-completion is forbidden as the subprojects's budget sum does not match the project's budget."
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    CompletionIsForbiddenBySubprojectCompletionError:
      title: 'Completion is forbidden by subproject completion error'
      properties:
        type:
          type: string
          example: CompletionIsForbiddenBySubprojectCompletion
        message:
          type: string
          example: 'Project-completion is forbidden as subprojects are completed partly.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    CustomerCountProjectsV3:
      title: CountProjects
      description: 'The number of active and inactive projects for one customer'
      required:
        - customers_id
        - active
        - inactive
      properties:
        customers_id:
          type: integer
          format: int64
          example: 10
        active:
          title: 'Number of active projects'
          type: integer
          format: int64
          example: 504
        inactive:
          title: 'Number of inactive projects'
          type: integer
          format: int64
          example: 27
      type: object
    custom_access_v2:
      description: 'Access only to selected customers'
      type: object
      additionalProperties:
        description: 'Key value pairs in the format {customer id} => true or {customer id} => {} for selected projects'
        oneOf:
          -
            description: 'Access to selected customers'
            type: boolean
            enum:
              - true
          -
            description: 'Access to selected projects'
            properties:
              projects:
                type: object
                additionalProperties:
                  description: 'Key value pairs in the format {project id} => true'
                  type: boolean
                  enum: [true]
            type: object
    CustomerV3:
      title: Customer
      required:
        - id
        - name
        - number
        - color
        - active
        - billable_default
        - test_data
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          maxLength: 100
          example: 'Hotel Bergblick'
        number:
          description: 'Freely selectable number for the customer'
          type: string
          maxLength: 50
          example: '10'
          nullable: true
        color:
          $ref: '#/components/schemas/CustomerColor'
        active:
          type: boolean
        billable_default:
          type: boolean
        note:
          description: 'Only visible for owners, managers or worker with elevated access `manage_customers_and_projects`'
          type: string
          maxLength: 1000
          example: 'This customer is important for us'
          nullable: true
        bill_service_id:
          description: 'Only visible for owners, managers or worker with elevated access `manage_customers_and_projects` and if a billing application with customers support is linked up'
          type: string
          example: '1234'
          nullable: true
        test_data:
          type: boolean
      type: object
    CustomerColor:
      title: 'Customer color'
      description: "Possible values:\n- `1`: BloodOrange\n- `2`: Sunflower\n- `3`: LightGreen\n- `4`: Caribbean\n- `5`: Sky\n- `6`: BrandBlue\n- `7`: BluePurple\n- `8`: Magenta\n- `9`: ChewingGum"
      type: integer
      enum:
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        - 7
        - 8
        - 9
      nullable: false
      x-enumNames:
        - BloodOrange
        - Sunflower
        - LightGreen
        - Caribbean
        - Sky
        - BrandBlue
        - BluePurple
        - Magenta
        - ChewingGum
    customer_projects_access_v2:
      properties:
        add:
          example: true
          oneOf:
            -
              $ref: '#/components/schemas/general_access_v2'
            -
              $ref: '#/components/schemas/custom_access_v2'
        report:
          example:
            '123': true
            '456': true
          oneOf:
            -
              $ref: '#/components/schemas/general_access_v2'
            -
              $ref: '#/components/schemas/custom_access_v2'
        edit:
          example:
            '123': true
            '456':
              projects:
                '789': true
          oneOf:
            -
              $ref: '#/components/schemas/general_access_v2'
            -
              $ref: '#/components/schemas/custom_access_v2'
      type: object
    CustomerProjectScope:
      title: 'Customer project scope'
      description: "Possible values:\n- `manageAccess`: ManageAccess"
      type: string
      enum:
        - manageAccess
      nullable: false
      x-enumNames:
        - ManageAccess
    DeleteCompanyDefaultIsNotAllowedError:
      title: 'Delete company default is not allowed error'
      properties:
        type:
          type: string
          example: DeleteCompanyDefaultIsNotAllowed
        message:
          type: string
          example: 'It is not allowed to delete a resource which is company default.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    DuplicateEntryForUserAndYearError:
      title: 'Duplicate entry for user and year error'
      properties:
        type:
          type: string
          example: DuplicateEntryForUserAndYear
        message:
          type: string
          example: 'A resource has already been defined for this user and year.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    ClockDurationV2:
      title: 'Edit clocked duration response'
      required:
        - updated
        - running
        - overlapping_correction
        - current_time
      properties:
        updated:
          $ref: '#/components/schemas/EntryV2'
        running:
          oneOf:
            -
              $ref: '#/components/schemas/EntryV2'
          nullable: true
          type: object
        overlapping_correction:
          required:
            - overlapping
            - overlapping_free_time_since
            - truncate_previous_entry
          properties:
            overlapping:
              type: boolean
              example: true
            overlapping_free_time_since:
              type: string
              format: date-time
              example: '2023-02-28T00:00:00Z'
              nullable: true
            truncate_previous_entry:
              type: integer
              format: int64
              example: 1
              nullable: true
          type: object
          nullable: true
        current_time:
          type: string
          format: date-time
          example: '2023-02-28T00:00:00Z'
      type: object
    EditLockDay:
      title: 'Edit lock day'
      description: "Possible values:\n- `1`: LockDays1\n- `2`: LockDays2\n- `3`: LockDays3\n- `5`: LockDays5\n- `8`: LockDays8\n- `15`: LockDays15\n- `31`: LockDays31\n- `46`: LockDays46\n- `91`: LockDays91"
      type: integer
      enum:
        - 1
        - 2
        - 3
        - 5
        - 8
        - 15
        - 31
        - 46
        - 91
      nullable: false
      x-enumNames:
        - LockDays1
        - LockDays2
        - LockDays3
        - LockDays5
        - LockDays8
        - LockDays15
        - LockDays31
        - LockDays46
        - LockDays91
    EmailNotAvailableError:
      title: 'Email not available error'
      properties:
        type:
          type: string
          example: EmailNotAvailable
        message:
          type: string
          example: 'Email is not available.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          $ref: '#/components/schemas/Resource'
      type: object
    EmptyError:
      title: 'Empty error'
      properties:
        type:
          type: string
          example: Empty
        message:
          type: string
          example: 'Value is required and cannot be empty.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    EndBeforeStartError:
      title: 'End before start error'
      properties:
        type:
          type: string
          example: EndBeforeStart
        message:
          type: string
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    entriesText_v3:
      required:
        - id
        - label
        - value
      properties:
        id:
          type: integer
          format: int64
          example: 10
        label:
          type: string
          example: test
        value:
          type: string
          example: test
      type: object
    EntryV2:
      title: Entry
      properties:
        id:
          title: ID
          type: integer
          format: int64
          example: 10
        customers_id:
          title: "Customer's ID"
          type: integer
          format: int64
          example: 10
        projects_id:
          title: "Project's ID"
          type: integer
          format: int64
          nullable: true
        subprojects_id:
          title: "Subproject's ID"
          type: integer
          format: int64
          nullable: true
        services_id:
          title: "Service's ID"
          type: integer
          format: int64
          nullable: true
        users_id:
          title: "User's ID"
          type: integer
          format: int64
        billable:
          title: 'is it billable?'
          type: integer
          format: int64
        texts_id:
          title: "Entry text's ID"
          type: integer
          format: int64
          nullable: true
        text:
          title: Description
          description: 'Only if enhanced_list=true'
          type: string
          nullable: true
        time_since:
          title: 'Start date and time'
          type: string
          format: date-time
          example: '2023-02-28T00:00:00Z'
        time_clocked_since:
          title: 'Clocked start date and time'
          type: string
          format: date-time
          example: '2023-02-28T00:00:00Z'
          nullable: true
        time_until:
          title: 'End date and time'
          type: string
          format: date-time
          example: '2023-02-28T00:00:00Z'
          nullable: true
        time_insert:
          title: 'Insertion date and time'
          type: string
          format: date-time
          example: '2023-02-28Z00:00:00Z'
        time_last_change:
          title: 'Modification date and time'
          type: string
          format: date-time
          example: '2023-02-28T00:00:00Z'
        test_data:
          title: 'is a test dataset?'
          type: boolean
        customers_name:
          title: "Customer's name"
          description: 'Only if enhanced_list=true'
          type: string
          example: 'Hotel Bergblick'
        projects_name:
          title: "Project's name"
          description: 'Only if enhanced_list=true'
          type: string
          example: 'Publicity campaign'
          nullable: true
        users_name:
          title: "User's name"
          description: 'Only if enhanced_list=true'
          type: string
          example: 'Max Mustermann'
        revenue:
          title: Revenue
          description: 'Only with necessary access rights and if enhanced_list=true'
          type: number
          example: 999.9
      type: object
    EntryGroupConfirmUpdateV2:
      required:
        - confirm_key
        - affected_entries
      properties:
        confirm_key:
          type: string
          nullable: false
        affected_entries:
          type: integer
          format: int64
          nullable: false
      type: object
    EntryGroupNoRestrictionV2:
      properties: {  }
    EntryGroupRestrictionV2:
      required:
        - users_id
        - teams_id
        - customers_id
        - projects_id
        - subprojects_id
        - services_id
        - lumpsum_services_id
        - billable
        - entriesTexts_id
        - budget_type
      properties:
        users_id:
          type: integer
          format: int64
          nullable: true
        teams_id:
          type: integer
          format: int64
          nullable: true
        customers_id:
          type: integer
          format: int64
          nullable: true
        projects_id:
          type: integer
          format: int64
          nullable: true
        subprojects_id:
          type: integer
          format: int64
          nullable: true
        services_id:
          type: integer
          format: int64
          nullable: true
        lumpsum_services_id:
          type: integer
          format: int64
          nullable: true
        billable:
          oneOf:
            -
              $ref: '#/components/schemas/Billable'
          nullable: true
        entriesTexts_id:
          type: integer
          format: int64
          nullable: true
        budget_type:
          type: string
          nullable: true
      type: object
    EntryGroupUpdateV2:
      required:
        - success
        - edited_entries
      properties:
        success:
          type: boolean
          nullable: false
        edited_entries:
          type: integer
          format: int64
          nullable: false
      type: object
    EntryGroupV2:
      required:
        - group
        - name
        - duration
        - restrictions
        - revenue
        - has_budget_revenues_billed
        - has_budget_revenues_not_billed
        - has_non_budget_revenues_billed
        - has_non_budget_revenues_not_billed
        - budget_used
        - hourly_rate
        - hourly_rate_is_equal_and_has_no_lumpsums
        - grouped_by
      properties:
        group:
          description: 'Identifier of the current group'
          type: string
          nullable: false
        name:
          description: 'Textual description of the current group'
          type: string
          nullable: false
        duration:
          description: 'Duration of all time entries of the group'
          type: integer
          format: int64
          nullable: false
        restrictions:
          description: 'Restrictions that apply to the current group, except for the current grouped_by and time restrictions'
          nullable: true
          oneOf:
            -
              $ref: '#/components/schemas/EntryGroupNoRestrictionV2'
            -
              $ref: '#/components/schemas/EntryGroupRestrictionV2'
            -
              type: object
        revenue:
          description: 'Revenue of all time entries in the group (only if necessary employee rights for the group)'
          type: integer
          format: int64
          nullable: false
        has_budget_revenues_billed:
          description: 'Does the group have at least one time entry that uses the hard project budget and has already been billed? (only if necessary employee rights for the group)'
          type: boolean
          nullable: false
        has_budget_revenues_not_billed:
          description: 'Does the group have at least one time entry that uses a hard project budget and has not yet been billed? (Only if necessary employee rights for the group)'
          type: boolean
          nullable: false
        has_non_budget_revenues_billed:
          description: 'Does the group have at least one time entry that does not use a hard project budget and has already been billed? (Only if the necessary employee rights are assigned to the group)'
          type: boolean
          nullable: false
        has_non_budget_revenues_not_billed:
          description: 'Does the group have at least one time entry that does not use a hard project budget and has not yet been billed? (Only if necessary employee rights for the group)'
          type: boolean
          nullable: false
        budget_used:
          description: 'Was a fixed project budget used for at least one time entry? (Only if necessary employee rights for the group)'
          type: boolean
          nullable: false
        hourly_rate:
          description: 'Average hourly rate for the group (only if necessary employee rights for the group)'
          type: number
          format: float
          nullable: true
        hourly_rate_is_equal_and_has_no_lumpsums:
          description: 'Is the hourly rate the same for all billable entries and does the group have no flat-rate entries? In this case, revenue can be calculated as follows: revenue = hourly_rate * duration. This is particularly useful for creating invoice items. (Only if the necessary employee rights for the group are available)'
          type: boolean
          nullable: false
        sub_groups:
          description: 'If multiple grouping criteria have been specified, the next level can be found here.'
          type: array
          items:
            $ref: '#/components/schemas/EntryGroupV2'
          nullable: true
        grouped_by:
          description: 'Grouping criterion of the current grouping level'
          type: string
          nullable: false
      type: object
    EntryTextMode:
      title: 'Entry text mode'
      description: "Possible values:\n- `add`: Add\n- `edit`: Edit\n- `reports`: Reports"
      type: string
      enum:
        - add
        - edit
        - reports
      nullable: false
      x-enumNames:
        - Add
        - Edit
        - Reports
    ExpectedValues:
      title: 'Expected values error details'
      description: 'Only certain values are allowed.'
      required:
        - expected_values
      properties:
        expected_values:
          title: 'Expected values'
          description: 'One or more expected values'
          type: array
          items:
            type: string
          example:
            - string
            - integer
      type: object
    Fields:
      title: 'Fields error details'
      description: 'The names of invalid input fields'
      required:
        - fields
      properties:
        fields:
          title: Fields
          description: 'One or more invalid fields'
          type: array
          items:
            type: string
          example:
            - type
            - status
      type: object
    FieldsShouldBeEmptyError:
      title: 'Fields should be empty error'
      properties:
        type:
          type: string
          example: FieldsShouldBeEmpty
        message:
          type: string
          example: 'According to your other information, the following fields should be empty: type, status.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          $ref: '#/components/schemas/Fields'
      type: object
    ForbiddenChangeToCustomAccessError:
      title: 'Forbidden change to custom access error'
      properties:
        type:
          type: string
          example: ForbiddenChangeToCustomAccess
        message:
          type: string
          example: 'Change to selected access is only possible from yes.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    ForbiddenError:
      title: 'Forbidden error'
      properties:
        type:
          type: string
          example: Forbidden
        message:
          type: string
          example: 'Access denied.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    ForbiddenValueError:
      title: 'Forbidden value error'
      properties:
        type:
          type: string
          example: ForbiddenValue
        message:
          type: string
          nullable: true
        path:
          type: string
          nullable: true
        details:
          $ref: '#/components/schemas/AllowedValues'
      type: object
    general_access_v2:
      description: 'General access'
      type: boolean
    GeneralErrors:
      required:
        - errors
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiErrors'
      type: object
    Grouping:
      title: Grouping
      description: "Possible values:\n- `billable`: Billable\n- `customers_id`: CustomersId\n- `day`: Day\n- `month`: Month\n- `is_lumpsum`: IsLumpSum\n- `lumpsum_services_id`: LumpSumServicesId\n- `projects_id`: ProjectsId\n- `services_id`: ServicesId\n- `subprojects_id`: SubprojectsId\n- `texts_id`: TextsId\n- `users_id`: UsersId\n- `week`: Week\n- `year`: Year"
      type: string
      enum:
        - billable
        - customers_id
        - day
        - month
        - is_lumpsum
        - lumpsum_services_id
        - projects_id
        - services_id
        - subprojects_id
        - texts_id
        - users_id
        - week
        - year
      nullable: false
      x-enumNames:
        - Billable
        - CustomersId
        - Day
        - Month
        - IsLumpSum
        - LumpSumServicesId
        - ProjectsId
        - ServicesId
        - SubprojectsId
        - TextsId
        - UsersId
        - Week
        - Year
    HalfDayAbsenceTooLongError:
      title: 'Half day absence too long error'
      properties:
        type:
          type: string
          example: HalfDayAbsenceTooLong
        message:
          type: string
          example: 'Absences of half a day may not extend over several days.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    HasToBeActiveError:
      title: 'Has to be active error'
      properties:
        type:
          type: string
          example: HasToBeActive
        message:
          type: string
          example: 'The resource must be active.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          $ref: '#/components/schemas/Resource'
      type: object
    HasToBeInactiveError:
      title: 'Has to be inactive error'
      properties:
        type:
          type: string
          example: HasToBeInactive
        message:
          type: string
          example: 'The resource must be inactive.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          $ref: '#/components/schemas/Resource'
      type: object
    HolidaysCarryV3:
      required:
        - id
        - users_id
        - year
        - count
      properties:
        id:
          type: integer
          format: int64
          example: 10
        users_id:
          type: integer
          format: int64
        year:
          type: integer
          format: int64
        count:
          title: 'Amount of carried holidays'
          type: number
          example: 5.5
        note:
          type: string
          maxLength: 1000
          example: 'Saved for spring vacation'
          nullable: true
      type: object
    HolidaysQuotumV2:
      required:
        - id
        - users_id
        - year_since
        - year_until
        - count
      properties:
        id:
          type: integer
          format: int64
          example: 10
        users_id:
          type: integer
          format: int64
          example: 20
        year_since:
          type: integer
          format: int64
          example: '2023'
        year_until:
          type: integer
          format: int64
          example: '2024'
          nullable: true
        count:
          type: number
          format: float
          example: 3.5
        note:
          type: string
          maxLength: 1000
          example: 'Carryover from previous year'
          nullable: true
      type: object
    IllegalChangeForCompletedProjectError:
      title: 'Illegal change for completed project error'
      properties:
        type:
          type: string
          example: IllegalChangeForCompletedProject
        message:
          type: string
          example: "The project has already been completed. The budget and deadline can't be changed."
          nullable: true
        path:
          type: string
          nullable: true
        details:
          $ref: '#/components/schemas/Fields'
      type: object
    InvalidCombinationError:
      title: 'Invalid combination error'
      properties:
        type:
          type: string
          example: InvalidCombination
        message:
          type: string
          example: 'The combination of the provided data is invalid.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          $ref: '#/components/schemas/Fields'
      type: object
    InvalidDateError:
      title: 'Invalid date error'
      properties:
        type:
          type: string
          example: InvalidDate
        message:
          type: string
          example: 'The given value is not an actual date.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    IsDefaultHolidaysCountError:
      title: 'Is default holidays count error'
      properties:
        type:
          type: string
          example: IsDefaultHolidaysCount
        message:
          type: string
          example: 'It is not allowed to delete a holidays quota which is user default.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    Language:
      title: Language
      description: "Possible values:\n- `en`: English\n- `fr`: French\n- `de`: German"
      type: string
      enum:
        - en
        - fr
        - de
      nullable: false
      x-enumNames:
        - English
        - French
        - German
    LumpSumServiceV4:
      title: 'Lump sum service'
      required:
        - id
        - name
        - price
        - unit
        - active
        - number
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          maxLength: 100
          example: 'Travel costs'
        price:
          description: 'Price per unit'
          type: number
          format: float
          example: 80.25
        unit:
          type: string
          maxLength: 6
          example: km
          nullable: true
        active:
          type: boolean
          example: true
        number:
          description: 'Lump sum service number'
          type: string
          maxLength: 50
          example: Travel-123
          nullable: true
        note:
          description: 'Only visible for owners, managers or worker with elevated access `manage_services`'
          type: string
          maxLength: 1000
          example: 'Travel costs for the trip to the customer'
          nullable: true
      type: object
    MaxUsersOfPlanTypeReachedError:
      title: 'Max users of plan type reached error'
      properties:
        type:
          type: string
          example: MaxUsersOfPlanTypeReached
        message:
          type: string
          example: 'You have reached the maximum number of co-workers included in your subscription. Please upgrade your plan in the payment section.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    MaxUsersReachedError:
      title: 'Max users reached error'
      properties:
        type:
          type: string
          example: MaxUsersReached
        message:
          type: string
          example: 'You have reached the maximum number of co-workers included in your subscription. Please update your subscription in the payment section.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    NonbusinessDayType:
      title: 'Nonbusiness day type'
      description: "Possible values:\n- `SPECIAL`: Special\n- `DISTINCT_ONCE`: DistinctOnce\n- `DISTINCT_RECURRING`: DistinctRecurring"
      type: string
      enum:
        - SPECIAL
        - DISTINCT_ONCE
        - DISTINCT_RECURRING
      nullable: false
      x-enumNames:
        - Special
        - DistinctOnce
        - DistinctRecurring
    NonbusinessDayV2:
      required:
        - id
        - nonbusiness_group_id
        - type
        - name
        - half_day
        - surcharge_special
        - evaluated_date
      properties:
        id:
          type: integer
          format: int64
          example: 10
        nonbusiness_group_id:
          type: integer
          format: int64
          example: 504
        type:
          $ref: '#/components/schemas/NonbusinessDayType'
        name:
          type: string
          example: 'Tag der deutschen Einheit'
        half_day:
          type: boolean
          example: true
        surcharge_special:
          type: boolean
          example: true
        special_id:
          type: integer
          format: int64
          example: 64
        evaluated_date:
          title: 'Evaluated date for the requested year'
          description: 'Default: CurrentYear'
          type: string
          format: date
          example: '2021-10-03'
        day:
          title: 'Day of the nonbusiness day'
          description: 'only for types DISTINCT_ONCE and DISTINCT_RECURRING'
          type: integer
          format: int64
          example: 3
        month:
          title: 'Month of the nonbusiness day'
          description: 'only for types DISTINCT_ONCE and DISTINCT_RECURRING'
          type: integer
          format: int64
          example: 10
        year:
          title: 'Year of the nonbusiness day'
          description: 'only for type DISTINCT_ONCE'
          type: integer
          format: int64
          example: 2021
      type: object
    NonbusinessGroupV2:
      required:
        - id
        - name
        - company_default
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          maxLength: 100
          example: 'Nonbusiness days in NRW'
        company_default:
          type: boolean
          example: false
      type: object
    NotBetweenError:
      title: 'Not between error'
      properties:
        type:
          type: string
          example: NotBetween
        message:
          type: string
          nullable: true
        path:
          type: string
          nullable: true
        details:
          $ref: '#/components/schemas/NotBetween'
      type: object
    NotBetween:
      title: 'Not between error details'
      description: 'The value is not between min and max'
      required:
        - min
        - max
        - inclusive
      properties:
        min:
          title: 'Minimum value'
          type: number
          example: 0
        max:
          title: 'Maximum value'
          type: number
          example: 10000
        inclusive:
          title: 'Boundaries inclusive'
          description: 'Are the minimum and maximum values allowed'
          type: boolean
          example: true
      type: object
    BudgetTotalErrorDetails:
      title: 'Not between error details'
      required:
        - max
        - budget_is_hours
      properties:
        max:
          type: number
          example: 10000
        budget_is_hours:
          type: boolean
          example: true
      type: object
    OnlyOwnerCanDeleteOwnerError:
      title: 'Only owner can delete owner error'
      properties:
        type:
          type: string
          example: OnlyOwnerCanDeleteOwner
        message:
          type: string
          example: 'Only Owner can delete owner.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    OvertimeCarryV3:
      title: 'Overtime carry'
      required:
        - id
        - users_id
        - year
        - hours
        - note
      properties:
        id:
          type: integer
          format: int64
          example: 10
        users_id:
          type: integer
          format: int64
        year:
          type: integer
          format: int64
          example: 2024
        hours:
          type: number
          format: float
          example: 5.5
        note:
          type: string
          maxLength: 1000
          example: 'Saved for spring'
          nullable: true
      type: object
    OvertimeReductionV3:
      title: 'Overtime reduction'
      required:
        - id
        - users_id
        - date
        - hours
        - note
        - added_at
        - added_by_users_id
      properties:
        id:
          type: integer
          format: int64
          example: 10
        users_id:
          type: integer
          format: int64
        date:
          type: string
          format: date
          example: '2023-02-28'
        hours:
          type: number
          example: 5.5
        note:
          type: string
          maxLength: 1000
          example: 'Visiting authorities'
          nullable: true
        added_at:
          type: string
          format: date
          example: '2023-02-28'
        added_by_users_id:
          type: integer
          format: int64
          example: 10
      type: object
    ProjectCompletionNoBillableEntriesError:
      title: 'Project completion no billable entries error'
      properties:
        type:
          type: string
          example: ProjectCompletionNoBillableEntries
        message:
          type: string
          example: "The project can't be set to completed. At least one billable entry is required."
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    ProjectCompletionRunningEntriesError:
      title: 'Project completion running entries error'
      properties:
        type:
          type: string
          example: ProjectCompletionRunningEntries
        message:
          type: string
          example: "The project can't be set to completed. A co-worker is currently tracking billable time with the clock."
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    ProjectCompletionTooManyLumpSumsError:
      title: 'Project completion too many lump sums error'
      properties:
        type:
          type: string
          example: ProjectCompletionTooManyLumpSums
        message:
          type: string
          example: "The project can't be set to completed. The sum of billable lump sums must not exceed the budget."
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    ProjectDeadlineIsNotBeforeProjectStartError:
      title: 'Project deadline is not before project start error'
      properties:
        type:
          type: string
          example: ProjectDeadlineIsNotBeforeProjectStart
        message:
          type: string
          example: 'Deadline must be after or equal to start date.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    ProjectDeadlineIsNotInPastError:
      title: 'Project deadline is not in past error'
      properties:
        type:
          type: string
          example: ProjectDeadlineIsNotInPast
        message:
          type: string
          example: 'Deadline must not be in past.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    ProjectIsCompletedError:
      title: 'Project is completed error'
      properties:
        type:
          type: string
          example: ProjectIsCompleted
        message:
          type: string
          example: 'The project is completed.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    ProjectReportsV3:
      required:
        - customers_id
        - customers_name
        - customers_number
        - projects_id
        - projects_name
        - projects_number
      properties:
        customers_id:
          type: integer
          format: int64
          example: 10
        customers_name:
          type: string
          maxLength: 100
          example: 'Hotel Bergblick'
        customers_number:
          description: 'Freely selectable number for the customer'
          type: string
          maxLength: 50
          example: 10
          nullable: true
        projects_id:
          type: integer
          format: int64
          example: 10
        projects_name:
          type: string
          maxLength: 100
          example: Werbekampagne
        projects_number:
          description: 'Freely selectable number for the project'
          type: string
          maxLength: 50
          example: 10
          nullable: true
      type: object
    ProjectV4:
      required:
        - id
        - customers_id
        - name
        - number
        - active
        - billable_default
        - completed
        - completed_at
        - test_data
        - count_subprojects
      properties:
        id:
          type: integer
          format: int64
          example: 10
        customers_id:
          type: integer
          format: int64
        name:
          type: string
          maxLength: 100
          example: 'Publicity campaign'
        number:
          title: 'Freely selectable number for the project'
          type: string
          maxLength: 50
          example: '10'
          nullable: true
        active:
          type: boolean
        billable_default:
          type: boolean
        note:
          description: 'Only with necessary access rights'
          type: string
          maxLength: 1000
          example: 'This project is important for us'
          nullable: true
        billed_money:
          title: 'Billed amount of money'
          description: 'Only with necessary access rights'
          type: number
          format: float
          nullable: true
        billed_completely:
          description: 'Only with necessary access rights'
          type: boolean
          nullable: true
        completed:
          type: boolean
        completed_at:
          title: 'Date and time when the project was completed'
          type: string
          format: date-time
          example: '2023-02-28T12:00:00Z'
          nullable: true
        revenue_factor:
          title: 'Factor by which revenues and hourly rates must be multiplied to obtain the effective values'
          description: 'Only with necessary access rights.\n`null` for a project with hard budget that hasn''t been completed yet.\nFor a project with hard budget which has been completed with a budget usage of 400%, the factor is `0.25`.\n`1` for projects without budget or with soft budget.'
          type: number
          format: float
          nullable: true
        test_data:
          type: boolean
        count_subprojects:
          description: 'Number of subprojects'
          type: integer
          example: 5
        deadline:
          title: 'Date when the project will be completed automatically'
          type: string
          format: date
          example: '2023-02-28'
          nullable: true
        start_date:
          description: 'Date when the project becomes available for time tracking'
          type: string
          format: date
          example: '2023-01-01'
          nullable: true
        budget:
          required:
            - monetary
            - hard
            - from_subprojects
            - interval
            - amount
            - notification_thresholds
          properties:
            monetary:
              title: 'Monetary or hour budget'
              description: 'Only with necessary access rights'
              type: boolean
            hard:
              title: 'Is it a hard or soft budget?'
              description: 'Only with necessary access rights'
              type: boolean
            from_subprojects:
              description: 'Is it a budget defined via the sum of the subproject budgets or a project budget?'
              type: boolean
            interval:
              description: 'Budget interval for recurring budgets (0=Weekly, 1=Monthly, 2=Quarterly, 3=Yearly). Can only be set if from_subprojects is also true.'
              type: integer
              enum:
                - 0
                - 1
                - 2
                - 3
              nullable: true
            amount:
              title: 'Budget for the project'
              description: 'Only with necessary access rights'
              type: number
              format: float
              nullable: true
            notification_thresholds:
              type: array
              items:
                $ref: '#/components/schemas/Thresholds'
          type: object
          nullable: true
        bill_service_id:
          type: string
          example: '1234'
          nullable: true
      type: object
    RateV3:
      title: Rate
      required:
        - id
        - customer_ids
        - project_ids
        - service_ids
        - user_ids
        - hourly_rate
        - test_data
        - children
      properties:
        id:
          type: integer
          format: int64
          example: 10
        customer_ids:
          type: array
          items:
            type: integer
            format: int64
            example: 10
          example:
            - 1
            - 2
            - 3
            - 4
            - 5
        project_ids:
          type: array
          items:
            type: integer
            format: int64
            example: 10
          example:
            - 1
            - 2
            - 3
            - 4
            - 5
        service_ids:
          type: array
          items:
            type: integer
            format: int64
            example: 10
          example:
            - 1
            - 2
            - 3
            - 4
            - 5
        user_ids:
          type: array
          items:
            type: integer
            format: int64
            example: 10
          example:
            - 1
            - 2
            - 3
            - 4
            - 5
        hourly_rate:
          type: number
          format: float
          example: 99.99
        test_data:
          type: boolean
          example: false
        children:
          type: array
          items:
            $ref: '#/components/schemas/RateV3'
          example: []
      type: object
    RegisterV1:
      required:
        - success
        - user
        - apikey
        - first_login_key
      properties:
        success:
          type: boolean
          nullable: false
        user:
          $ref: '#/components/schemas/SettingV1'
        apikey:
          type: string
          nullable: false
        first_login_key:
          type: string
          nullable: true
      type: object
    RelationsPreventDeletionError:
      title: 'Relations prevent deletion error'
      properties:
        type:
          type: string
          example: RelationsPreventDeletion
        message:
          type: string
          example: 'Resource can not be deleted, there are existing relations. Please delete the related resources first.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          $ref: '#/components/schemas/Resource'
      type: object
    RequiresBudgetError:
      title: 'Requires budget error'
      properties:
        type:
          type: string
          example: RequiresBudget
        message:
          type: string
          example: 'A budget is required when budget type is hard.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    ResourceConflictFoundError:
      title: 'Resource conflict found error'
      properties:
        type:
          type: string
          example: ResourceConflictFound
        message:
          type: string
          example: 'There is already a service with this name.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          $ref: '#/components/schemas/Resource'
      type: object
    Resource:
      title: 'Resource error details'
      description: 'The names of affected resources'
      required:
        - resources
      properties:
        resources:
          title: Resources
          description: 'One or more affected resources'
          type: array
          items:
            type: string
          example:
            - customers
            - users
      type: object
    ResourceNotFoundError:
      title: 'Resource not found error'
      properties:
        type:
          type: string
          example: ResourceNotFound
        message:
          type: string
          example: 'The requested resource could not be found.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    ResourcesInactiveError:
      title: 'Resources inactive error'
      properties:
        type:
          type: string
          example: ResourcesInactive
        message:
          type: string
          example: 'The requested resources are inactive.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          $ref: '#/components/schemas/ResourcesInactive'
      type: object
    ResourcesInactive:
      title: 'Resources inactive error details'
      required:
        - inactive_ids
      properties:
        inactive_ids:
          title: 'Inactive resources'
          description: 'One or more ids of inactive resources'
          type: array
          items:
            type: integer
          example:
            - 99999
      type: object
    ResourcesNotFoundError:
      title: 'Resources not found error'
      properties:
        type:
          type: string
          example: ResourcesNotFound
        message:
          type: string
          example: 'The requested resources could not be found.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          $ref: '#/components/schemas/ResourcesNotFound'
      type: object
    ResourcesNotFound:
      title: 'Resources not found error details'
      required:
        - not_found_ids
      properties:
        not_found_ids:
          title: 'Not found resources'
          description: 'One or more ids of missing resources'
          type: array
          items:
            type: integer
          example:
            - 99999
      type: object
    Role:
      title: Role
      description: "Possible values:\n- `worker`: Worker\n- `manager`: Manager\n- `owner`: Owner"
      type: string
      enum:
        - worker
        - manager
        - owner
      nullable: false
      x-enumNames:
        - Worker
        - Manager
        - Owner
    RunningEntriesPreventArchivingError:
      title: 'Running entries prevent archiving error'
      properties:
        type:
          type: string
          example: RunningEntriesPreventArchiving
        message:
          type: string
          example: 'Resource can not be archived, there are running entries. Please stop those entries first.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    RunningEntriesPreventDeletionError:
      title: 'Running entries prevent deletion error'
      properties:
        type:
          type: string
          example: RunningEntriesPreventDeletion
        message:
          type: string
          example: 'Resource can not be deleted, there are running entries. Please stop and delete those entries first.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    services_access_v2:
      properties:
        add:
          example:
            '123': true
            '456': true
          oneOf:
            -
              $ref: '#/components/schemas/general_access_v2'
            -
              description: 'Access to selected services'
              type: object
              additionalProperties:
                description: 'Key value pairs in the format {service id} => true'
                type: boolean
                enum:
                  - true
      type: object
    ServiceScope:
      title: 'Service scope'
      description: "Possible values:\n- `manageAccess`: ManageAccess"
      type: string
      enum:
        - manageAccess
      nullable: false
      x-enumNames:
        - ManageAccess
    ServiceV4:
      required:
        - id
        - name
        - number
        - active
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          maxLength: 100
          example: Repair
        number:
          title: 'Freely selectable number for the service'
          type: string
          maxLength: 50
          example: SRV-123
          nullable: true
        active:
          type: boolean
        note:
          description: 'Only visible for owners, managers or worker with elevated access `manage_services`'
          type: string
          maxLength: 1000
          example: 'Repair cost for the customer'
          nullable: true
        bill_service_id:
          description: 'Only visible for owners, managers or worker with elevated access `manage_services` and if a billing application with services support is linked up'
          type: string
          example: '1234'
          nullable: true
      type: object
    SettingAccessV1:
      required:
        - addCustomers
      properties:
        addCustomers:
          type: boolean
          nullable: false
      type: object
    SettingPriceFormatV1:
      required:
        - example
        - format
      properties:
        example:
          type: number
          format: float
          nullable: false
        format:
          type: string
          nullable: false
      type: object
    SettingV1:
      required:
        - name
        - email
        - role
        - access
        - price_format
        - timeformat_12h
        - weekstart_monday
        - weekend_friday
        - language
        - currency
        - currency_symbol
        - timezone
        - support_pin
        - allowEntriesTextMultiline
      properties:
        name:
          type: string
          nullable: false
        email:
          type: string
          nullable: false
        role:
          $ref: '#/components/schemas/Role'
        access:
          $ref: '#/components/schemas/SettingAccessV1'
        price_format:
          $ref: '#/components/schemas/SettingPriceFormatV1'
        timeformat_12h:
          type: boolean
          nullable: false
        weekstart_monday:
          type: boolean
          nullable: false
        weekend_friday:
          type: boolean
          nullable: false
        language:
          $ref: '#/components/schemas/Language'
        currency:
          type: string
          nullable: false
        currency_symbol:
          type: string
          nullable: false
        timezone:
          type: string
          nullable: false
        support_pin:
          type: string
          nullable: false
        allowEntriesTextMultiline:
          type: boolean
          nullable: false
      type: object
    ShouldNotHaveBudgetError:
      title: 'Should not have budget error'
      properties:
        type:
          type: string
          example: ShouldNotHaveBudget
        message:
          type: string
          example: 'This subproject cannot have a budget, as it belongs to a project without budget.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    SimpleErrors:
      title: 'Simple error'
      required:
        - code
        - message
      properties:
        code:
          description: 'HTTP status code'
          type: integer
        message:
          description: 'An error occurred'
          type: string
        fields:
          description: 'Affected fields'
          type: array
          items:
            type: string
      type: object
    SimpleErrorResponses:
      title: 'Simple error response'
      properties:
        error:
          $ref: '#/components/schemas/SimpleErrors'
      type: object
    ApiProjectsReportsV3_SortForIndex:
      title: 'Sort for index'
      description: "Possible values:\n- `customers_name`: CustomersNameAsc\n- `-customers_name`: CustomersNameDesc\n- `projects_name`: ProjectsNameAsc\n- `-projects_name`: ProjectsNameDesc"
      type: string
      enum:
        - customers_name
        - '-customers_name'
        - projects_name
        - '-projects_name'
      nullable: false
      x-enumNames:
        - CustomersNameAsc
        - CustomersNameDesc
        - ProjectsNameAsc
        - ProjectsNameDesc
    ApiUsersV3_SortForIndex:
      title: 'Sort for index'
      description: "Possible values:\n- `active`: ActiveAsc\n- `-active`: ActiveDesc\n- `id`: IdAsc\n- `-id`: IdDesc\n- `name`: NameAsc\n- `-name`: NameDesc\n- `number`: NumberAsc\n- `-number`: NumberDesc\n- `role`: RoleAsc\n- `-role`: RoleDesc\n- `teams_name`: TeamsNameAsc\n- `-teams_name`: TeamsNameDesc"
      type: string
      enum:
        - active
        - '-active'
        - id
        - '-id'
        - name
        - '-name'
        - number
        - '-number'
        - role
        - '-role'
        - teams_name
        - '-teams_name'
      nullable: false
      x-enumNames:
        - ActiveAsc
        - ActiveDesc
        - IdAsc
        - IdDesc
        - NameAsc
        - NameDesc
        - NumberAsc
        - NumberDesc
        - RoleAsc
        - RoleDesc
        - TeamsNameAsc
        - TeamsNameDesc
    SortIdName:
      title: 'Sort id name'
      description: "Possible values:\n- `id`: IdAsc\n- `-id`: IdDesc\n- `name`: NameAsc\n- `-name`: NameDesc"
      type: string
      enum:
        - id
        - '-id'
        - name
        - '-name'
      nullable: false
      x-enumNames:
        - IdAsc
        - IdDesc
        - NameAsc
        - NameDesc
    SortIdNameActive:
      title: 'Sort id name active'
      description: "Possible values:\n- `active`: ActiveAsc\n- `-active`: ActiveDesc\n- `id`: IdAsc\n- `-id`: IdDesc\n- `name`: NameAsc\n- `-name`: NameDesc"
      type: string
      enum:
        - active
        - '-active'
        - id
        - '-id'
        - name
        - '-name'
      nullable: false
      x-enumNames:
        - ActiveAsc
        - ActiveDesc
        - IdAsc
        - IdDesc
        - NameAsc
        - NameDesc
    SsoPreventsDeactivationError:
      title: 'Sso prevents deactivation error'
      properties:
        type:
          type: string
          example: SsoPreventsDeactivation
        message:
          type: string
          example: "This user account can't be deactivated because it is the main account of an add-on linkup."
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    SsoPreventsDowngradeError:
      title: 'Sso prevents downgrade error'
      properties:
        type:
          type: string
          example: SsoPreventsDowngrade
        message:
          type: string
          example: 'This user account needs to have managing access because it is the main account of an add-on linkup.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    StatusIsForbiddenError:
      title: 'Status is forbidden error'
      properties:
        type:
          type: string
          example: StatusIsForbidden
        message:
          type: string
          example: 'The provided status is not available in this constellation.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    SubprojectBudgetCommitmentNotEditableForBudgetSourceError:
      title: 'Subproject budget commitment not editable for budget source error'
      properties:
        type:
          type: string
          example: SubprojectBudgetCommitmentNotEditableForBudgetSource
        message:
          type: string
          example: 'Budget strictness cannot be edited for this budget source configuration.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    SubprojectBudgetModificationIsProhibitedBecauseItIsCompletedError:
      title: 'Subproject budget modification is prohibited because it is completed error'
      properties:
        type:
          type: string
          example: SubprojectBudgetModificationIsProhibitedBecauseItIsCompleted
        message:
          type: string
          example: 'You cannot edit subproject budget data because the subproject is already completed.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    SubprojectBudgetModificationIsProhibitedBecauseProjectIsCompletedError:
      title: 'Subproject budget modification is prohibited because project is completed error'
      properties:
        type:
          type: string
          example: SubprojectBudgetModificationIsProhibitedBecauseProjectIsCompleted
        message:
          type: string
          example: 'You cannot edit subproject budget data because the main project is already completed.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    SubprojectBudgetTypeNotEditableForBudgetSourceError:
      title: 'Subproject budget type not editable for budget source error'
      properties:
        type:
          type: string
          example: SubprojectBudgetTypeNotEditableForBudgetSource
        message:
          type: string
          example: 'Budget type cannot be edited for this budget source configuration.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    SubprojectBudgetV3:
      required:
        - monetary
        - hard
        - from_subprojects
        - amount
        - notification_thresholds
      properties:
        monetary:
          type: boolean
          nullable: false
        hard:
          type: boolean
          nullable: false
        from_subprojects:
          type: boolean
          nullable: false
        amount:
          type: number
          format: float
          nullable: false
        notification_thresholds:
          type: array
          items:
            $ref: '#/components/schemas/Thresholds'
          nullable: false
      type: object
    SubprojectCompletionNoBillableEntriesError:
      title: 'Subproject completion no billable entries error'
      properties:
        type:
          type: string
          example: SubprojectCompletionNoBillableEntries
        message:
          type: string
          example: "The subproject can't be set to completed. At least one billable entry is required."
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    SubprojectCompletionRunningEntriesError:
      title: 'Subproject completion running entries error'
      properties:
        type:
          type: string
          example: SubprojectCompletionRunningEntries
        message:
          type: string
          example: "The subproject can't be set to completed. A co-worker is currently tracking billable time with the clock."
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    SubprojectCompletionTooManyLumpSumsError:
      title: 'Subproject completion too many lump sums error'
      properties:
        type:
          type: string
          example: SubprojectCompletionTooManyLumpSums
        message:
          type: string
          example: "The subproject can't be set to completed. The sum of billable lump sums must not exceed the budget."
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    SubprojectCompletionWithHardBudgetIsProhibitedForCompletedProjectsError:
      title: 'Subproject completion with hard budget is prohibited for completed projects error'
      properties:
        type:
          type: string
          example: SubprojectCompletionWithHardBudgetIsProhibitedForCompletedProjects
        message:
          type: string
          example: 'You cannot complete a subproject with a hard budget because the project is completed.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    SubprojectCreationWithBudgetIsProhibitedError:
      title: 'Subproject creation with budget is prohibited error'
      properties:
        type:
          type: string
          example: SubprojectCreationWithBudgetIsProhibited
        message:
          type: string
          example: 'You cannot create a subproject with a budget because it is already completed.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    SubprojectDeadlineIsNotBeforeProjectStartError:
      title: 'Subproject deadline is not before project start error'
      properties:
        type:
          type: string
          example: SubprojectDeadlineIsNotBeforeProjectStart
        message:
          type: string
          example: 'Deadline must be after or equal to start date.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    SubprojectDeadlineIsNotInPastError:
      title: 'Subproject deadline is not in past error'
      properties:
        type:
          type: string
          example: SubprojectDeadlineIsNotInPast
        message:
          type: string
          example: 'Deadline must not be in past.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    SubprojectIsCompletedError:
      title: 'Subproject is completed error'
      properties:
        type:
          type: string
          example: SubprojectIsCompleted
        message:
          type: string
          example: 'The subproject is completed.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    SubprojectV3:
      required:
        - id
        - projects_id
        - name
        - number
        - billable_default
        - completed
        - completed_at
        - start_date
        - deadline
      properties:
        id:
          type: integer
          nullable: false
        projects_id:
          type: integer
          nullable: false
        name:
          type: string
          nullable: false
        note:
          type: string
          nullable: true
        number:
          type: string
          nullable: true
        budget:
          oneOf:
            -
              $ref: '#/components/schemas/SubprojectBudgetV3'
          nullable: true
        billable_default:
          type: boolean
          nullable: false
        completed:
          type: boolean
          nullable: false
        completed_at:
          type: string
          format: date-time
          nullable: true
        revenue_factor:
          type: number
          format: float
          nullable: true
        start_date:
          type: string
          format: date
          nullable: true
        deadline:
          type: string
          nullable: true
        bill_service_id:
          type: string
          nullable: true
      type: object
    TargetHourType:
      title: 'Target hour type'
      description: "Possible values:\n- `weekly`: Weekly\n- `monthly`: Monthly"
      type: string
      enum:
        - weekly
        - monthly
      nullable: false
      x-enumNames:
        - Weekly
        - Monthly
    TargetHourV1:
      required:
        - id
        - users_id
        - type
        - surcharge_models_id
        - date_since
        - date_until
        - test_data
      properties:
        id:
          type: integer
          format: int64
          example: 10
        users_id:
          type: integer
          format: int64
          example: 10
        surcharge_models_id:
          type: integer
          format: int64
          example: 10
          nullable: true
        type:
          $ref: '#/components/schemas/TargetHourType'
        date_since:
          type: string
          format: date
          example: '2023-02-28'
        date_until:
          type: string
          format: date
          example: '2023-03-03'
          nullable: true
        test_data:
          type: boolean
        monday:
          type: number
          example: 8.5
        tuesday:
          type: number
          example: 8.5
        wednesday:
          type: number
          example: 8.5
        thursday:
          type: number
          example: 8.5
        friday:
          type: number
          example: 8.5
        saturday:
          type: number
          example: 8.5
        sunday:
          type: number
          example: 8.5
        absence_fixed_credit:
          title: 'applied time for absences before 2021'
          description: 'true if credited absence hours are applied against the average target hours, false if credited absence hours match the target hours of the specific day'
          type: boolean
          example: true
        compensation_daily:
          title: 'Automatic time compensation per day in minutes'
          type: number
          example: 30.5
        compensation_monthly:
          type: number
          example: 0.5
        workday_monday:
          type: boolean
          example: true
        workday_tuesday:
          type: boolean
          example: true
        workday_wednesday:
          type: boolean
          example: true
        workday_thursday:
          type: boolean
          example: true
        workday_friday:
          type: boolean
          example: true
        workday_saturday:
          type: boolean
          example: true
        workday_sunday:
          type: boolean
          example: true
        monthly_target:
          type: number
          example: 172.5
      type: object
    TeamV3:
      required:
        - id
        - name
        - leader
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          maxLength: 100
          example: Marketing
        leader:
          title: 'The user ID of the team leader'
          type: integer
          format: int64
          example: 103
          nullable: true
      type: object
    BlockingAccessDependencies:
      title: 'There are blocking access dependencies that need to be removed beforehand'
      required:
        - access_name
      properties:
        access_name:
          description: 'The access you were trying to remove'
          type: string
          example: see_absences
        elevated_access_dependencies:
          description: 'Elevated access dependencies that are blocking'
          type: array
          items:
            type: string
          example:
            - see_work_time
            - manage_work_time
      type: object
    Thresholds:
      title: Thresholds
      description: "Possible values:\n- `50`: Percent50\n- `60`: Percent60\n- `70`: Percent70\n- `80`: Percent80\n- `90`: Percent90\n- `100`: Percent100\n- `110`: Percent110\n- `120`: Percent120\n- `130`: Percent130\n- `140`: Percent140\n- `150`: Percent150\n- `200`: Percent200\n- `250`: Percent250\n- `300`: Percent300"
      type: integer
      enum:
        - 50
        - 60
        - 70
        - 80
        - 90
        - 100
        - 110
        - 120
        - 130
        - 140
        - 150
        - 200
        - 250
        - 300
      nullable: false
      x-enumNames:
        - Percent50
        - Percent60
        - Percent70
        - Percent80
        - Percent90
        - Percent100
        - Percent110
        - Percent120
        - Percent130
        - Percent140
        - Percent150
        - Percent200
        - Percent250
        - Percent300
    UnexpectedValueError:
      title: 'Unexpected value error'
      properties:
        type:
          type: string
          example: UnexpectedValue
        message:
          type: string
          example: 'Only these values are expected: string'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          $ref: '#/components/schemas/ExpectedValues'
      type: object
    UntilBeforeSinceIsForbiddenError:
      title: 'Until before since is forbidden error'
      properties:
        type:
          type: string
          example: UntilBeforeSinceIsForbidden
        message:
          type: string
          example: 'Until date must be after or equal to the since date.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    UntilMustBeInSameYearError:
      title: 'Until must be in same year error'
      properties:
        type:
          type: string
          example: UntilMustBeInSameYear
        message:
          type: string
          example: 'The "until" date must be in the same year as the "since" date.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    UserV3:
      title: User
      required:
        - id
        - name
        - weekstart_monday
        - weekend_friday
        - active
        - timeformat_12h
        - language
        - timezone
        - teams_id
        - initials
        - nonbusiness_groups_id
        - wage_type
      properties:
        id:
          title: ID
          type: integer
          format: int64
          example: 10
        name:
          title: Name
          type: string
          maxLength: 100
        weekstart_monday:
          title: 'Start week on Monday?'
          description: 'If false, the week starts on Sunday'
          type: boolean
        weekend_friday:
          title: 'Is the weekend Friday and Saturday?'
          description: 'If false, the weekend is Saturday and Sunday'
          type: boolean
        active:
          title: Active
          type: boolean
        timeformat_12h:
          title: 'Use 12h time format?'
          type: boolean
        language:
          title: Language
          enum:
            - en
            - fr
            - de
        timezone:
          title: 'Time zone'
          description: 'e.g. `Europe/Berlin`'
          type: string
        teams_id:
          title: 'ID of the team'
          type: integer
          format: int64
          nullable: true
        initials:
          title: Initials
          type: string
        nonbusiness_groups_id:
          title: 'ID of the nonbusiness group'
          description: 'deprecated; use v2/usersNonbusinessGroups instead'
          type: integer
          format: int64
          nullable: true
        number:
          title: Number
          type: string
          maxLength: 50
          nullable: true
        work_time_regulations_id:
          title: 'ID of the work time regulation'
          description: '`0` if the co-worker has no work time regulation\n`null` if the company default is applicable'
          type: integer
          format: int64
          nullable: true
        default_work_time_regulation:
          title: 'Default work time regulation'
          description: "Uses the company's default work time regulation"
          type: boolean
        boss:
          title: 'ID of the boss'
          type: integer
          format: int64
          nullable: true
        absence_managers_id:
          title: 'Absence managers IDs'
          type: array
          items:
            type: integer
            format: int64
        email:
          title: 'Email address'
          type: string
          maxLength: 90
        role:
          $ref: '#/components/schemas/Role'
        can_generally_see_absences:
          title: "Can see other co-workers' absences?"
          description: "Only editable for co-workers with the role 'worker'"
          type: boolean
        can_generally_manage_absences:
          title: "Can edit other co-workers' absences?"
          description: "Only editable for co-workers with the role 'worker'"
          type: boolean
        can_add_customers:
          title: 'Can add customers'
          description: "Only editable for co-workers with the role 'worker'"
          type: boolean
        default_holidays_count:
          description: "Uses the company's default holiday count"
          type: boolean
        default_target_hours:
          title: 'Default target hours'
          description: "Uses the company's default target hours"
          type: boolean
        future_coworker:
          title: 'Is future co-worker?'
          description: 'The future co-worker cannot log in yet and the license is free until the start date.'
          type: boolean
          example: true
        start_date:
          title: 'Start date'
          type: string
          format: date
          example: '2024-07-15'
          nullable: true
        wage_type:
          title: 'Relevant for DATEV export'
          enum:
            - 0
            - 1
            - 2
          nullable: true
        edit_lock:
          title: 'Edit lock'
          description: 'Defined editing lock for the co-worker'
          format: date
          enum:
            - 1
            - 2
            - 3
            - 5
            - 8
            - 15
            - 31
            - 46
            - 91
          example: '2024-06-15'
          nullable: true
        edit_lock_dyn:
          oneOf:
            -
              $ref: '#/components/schemas/EditLockDay'
          nullable: true
          title: 'Dynamic edit lock'
          description: 'Relative editing lock in days for the co-worker'
        edit_lock_sync:
          title: 'Can changes to the company-wide edit lock overwrite the edit lock for this co-worker?'
          type: boolean
          nullable: true
        work_time_edit_lock_days:
          oneOf:
            -
              $ref: '#/components/schemas/EditLockDay'
          nullable: true
          title: 'Work time edit lock days'
          description: 'Relative work time editing lock in days for the co-worker'
        budget_notifications:
          type: boolean
          nullable: false
      type: object
    UserCannotDeleteThemselvesError:
      title: 'User cannot delete themselves error'
      properties:
        type:
          type: string
          example: UserCannotDeleteThemselves
        message:
          type: string
          example: 'User cannot delete themselves.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    UserIsNotManageableError:
      title: 'User is not manageable error'
      properties:
        type:
          type: string
          example: UserIsNotManageable
        message:
          type: string
          example: 'User is not manageable'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    UserReportAbsenceSummaryV1:
      required:
        - regular_holidays
        - sick_self
        - sick_child
        - special_leaves
        - school
        - maternity_protection
        - home_office
        - out_of_office
        - quarantine
        - military_service
      properties:
        regular_holidays:
          type: number
          format: float
          nullable: false
        sick_self:
          type: number
          format: float
          nullable: false
        sick_child:
          type: number
          format: float
          nullable: false
        special_leaves:
          type: number
          format: float
          nullable: false
        school:
          type: number
          format: float
          nullable: false
        maternity_protection:
          type: number
          format: float
          nullable: false
        home_office:
          type: number
          format: float
          nullable: false
        out_of_office:
          type: number
          format: float
          nullable: false
        quarantine:
          type: number
          format: float
          nullable: false
        military_service:
          type: number
          format: float
          nullable: false
      type: object
    UserReportBreakItemV1:
      required:
        - since
        - until
        - length
      properties:
        since:
          type: string
          format: date-time
          nullable: false
        until:
          type: string
          format: date-time
          nullable: false
        length:
          type: number
          format: float
          nullable: false
      type: object
    UserReportDayDetailV1:
      required:
        - date
        - weekday
        - nonbusiness
        - count_absence
        - count_reduction_used
        - target
        - target_raw
        - surcharges
      properties:
        date:
          type: string
          format: date
          nullable: false
        weekday:
          type: integer
          nullable: false
        nonbusiness:
          type: boolean
          nullable: false
        count_absence:
          $ref: '#/components/schemas/UserReportAbsenceSummaryV1'
        count_reduction_used:
          type: number
          format: float
          nullable: true
        target:
          type: number
          format: float
          nullable: true
        target_raw:
          type: number
          format: float
          nullable: true
        surcharges:
          $ref: '#/components/schemas/UserReportSurchargeSummaryV1'
        hours:
          type: number
          format: float
          nullable: true
        hours_without_compensation:
          type: number
          format: float
          nullable: true
        diff:
          type: number
          format: float
          nullable: false
        breaks:
          type: array
          items:
            $ref: '#/components/schemas/UserReportBreakItemV1'
          nullable: false
        work_start:
          type: string
          format: date-time
          nullable: true
        work_end:
          type: string
          format: date-time
          nullable: true
      type: object
    UserReportMonthDetailV1:
      required:
        - nr
        - sum_target
        - sum_hours
        - sum_hours_without_compensation
        - sum_reduction_used
        - sum_overtime_reduced
        - diff
        - surcharges
        - week_details
      properties:
        nr:
          type: integer
          nullable: false
        sum_target:
          type: number
          format: float
          nullable: true
        sum_hours:
          type: number
          format: float
          nullable: false
        sum_hours_without_compensation:
          type: number
          format: float
          nullable: false
        sum_reduction_used:
          type: number
          format: float
          nullable: false
        sum_overtime_reduced:
          type: number
          format: float
          nullable: false
        diff:
          type: number
          format: float
          nullable: false
        surcharges:
          $ref: '#/components/schemas/UserReportSurchargeSummaryV1'
        week_details:
          type: array
          items:
            $ref: '#/components/schemas/UserReportWeekDetailV1'
          nullable: true
      type: object
    UserReportSurchargeSummaryV1:
      required:
        - saturday
        - sunday
        - nonbusiness
        - nonbusiness_special
        - night
        - night_increased
      properties:
        saturday:
          type: number
          format: float
          nullable: false
        sunday:
          type: number
          format: float
          nullable: false
        nonbusiness:
          type: number
          format: float
          nullable: false
        nonbusiness_special:
          type: number
          format: float
          nullable: false
        night:
          type: number
          format: float
          nullable: false
        night_increased:
          type: number
          format: float
          nullable: false
      type: object
    UserReportType:
      title: 'User report type'
      description: "Possible values:\n- `0`: Year\n- `1`: Month\n- `2`: Week\n- `3`: Day\n- `4`: DayWithWorkTime"
      type: integer
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
      nullable: false
      x-enumNames:
        - Year
        - Month
        - Week
        - Day
        - DayWithWorkTime
    UserReportV1:
      required:
        - users_id
        - users_name
        - users_number
        - users_email
        - sum_target
        - sum_hours
        - sum_reduction_used
        - sum_reduction_planned
        - overtime_carryover
        - overtime_reduced
        - diff
        - holidays_quota
        - holidays_carry
        - sum_absence
        - surcharges
        - workdays
        - month_details
      properties:
        users_id:
          type: integer
          nullable: false
        users_name:
          type: string
          nullable: false
        users_number:
          title: 'Personnel number'
          type: string
          nullable: true
        users_email:
          type: string
          nullable: false
        sum_target:
          title: 'Planned work time for the year'
          description: 'In seconds'
          type: number
          format: float
          nullable: true
        sum_hours:
          title: 'Work time in the year'
          description: 'In seconds'
          type: number
          format: float
          nullable: false
        sum_reduction_used:
          title: 'Sum of overtime reductions in the year'
          description: 'In seconds'
          type: number
          format: float
          nullable: false
        sum_reduction_planned:
          title: 'Sum of planned overtime reductions in the rest of the year'
          description: 'In seconds'
          type: number
          format: float
          nullable: false
        overtime_carryover:
          title: 'Overtime carryover for the year'
          description: 'In seconds'
          type: number
          format: float
          nullable: false
        overtime_reduced:
          title: 'Overtime reduced for the year'
          description: 'In seconds'
          type: number
          format: float
          nullable: false
        diff:
          title: 'Calculated difference of the working time of the year'
          description: 'In seconds'
          type: number
          format: float
          nullable: false
        holidays_quota:
          title: 'Holiday quota for the year'
          type: number
          format: float
          nullable: false
        holidays_carry:
          title: 'Holiday carryover for the year'
          type: number
          format: float
          nullable: false
        sum_absence:
          $ref: '#/components/schemas/UserReportAbsenceSummaryV1'
        surcharges:
          $ref: '#/components/schemas/UserReportSurchargeSummaryV1'
        workdays:
          type: number
          format: float
          nullable: false
        month_details:
          type: array
          items:
            $ref: '#/components/schemas/UserReportMonthDetailV1'
          nullable: true
      type: object
    UserReportWeekDetailV1:
      required:
        - nr
        - sum_target
        - sum_hours
        - sum_reduction_used
        - diff
        - surcharges
        - day_details
      properties:
        nr:
          type: integer
          nullable: false
        sum_target:
          type: number
          format: float
          nullable: true
        sum_hours:
          type: number
          format: float
          nullable: false
        sum_reduction_used:
          type: number
          format: float
          nullable: false
        diff:
          type: number
          format: float
          nullable: false
        surcharges:
          $ref: '#/components/schemas/UserReportSurchargeSummaryV1'
        day_details:
          type: array
          items:
            $ref: '#/components/schemas/UserReportDayDetailV1'
          nullable: true
      type: object
    UsersAccessCustomersProjectCustomerChildRestrictedAccessV2:
      required:
        - key
        - hasAccess
      properties:
        key:
          type: string
          nullable: false
        hasAccess:
          nullable: false
          oneOf:
            -
              type: boolean
            -
              type: array
              items:
                $ref: '#/components/schemas/UsersAccessCustomersProjectProjectRestrictedAccessV2'
      type: object
    UsersAccessCustomersProjectCustomerRestrictedAccessV2:
      required:
        - id
        - hasAccess
      properties:
        id:
          nullable: false
          oneOf:
            -
              type: string
            -
              type: integer
              format: int64
        hasAccess:
          nullable: false
          oneOf:
            -
              type: boolean
            -
              type: array
              items:
                $ref: '#/components/schemas/UsersAccessCustomersProjectCustomerChildRestrictedAccessV2'
      type: object
    UsersAccessCustomersProjectProjectRestrictedAccessV2:
      required:
        - id
        - hasAccess
      properties:
        id:
          nullable: false
          oneOf:
            -
              type: string
            -
              type: integer
              format: int64
        hasAccess:
          type: boolean
          nullable: false
      type: object
    UsersAccessCustomersProjectV2:
      required:
        - add
        - report
        - edit
      properties:
        add:
          nullable: false
          oneOf:
            -
              type: boolean
            -
              type: array
              items:
                $ref: '#/components/schemas/UsersAccessCustomersProjectCustomerRestrictedAccessV2'
        report:
          nullable: false
          oneOf:
            -
              type: boolean
            -
              type: array
              items:
                $ref: '#/components/schemas/UsersAccessCustomersProjectCustomerRestrictedAccessV2'
        edit:
          nullable: false
          oneOf:
            -
              type: boolean
            -
              type: array
              items:
                $ref: '#/components/schemas/UsersAccessCustomersProjectCustomerRestrictedAccessV2'
      type: object
    UsersAccessServiceRestrictedAccessV2:
      required:
        - id
        - hasAccess
      properties:
        id:
          title: 'service ID'
          nullable: false
          oneOf:
            -
              type: string
            -
              type: integer
              format: int64
        hasAccess:
          type: boolean
          nullable: false
      type: object
    UsersAccessServiceV2:
      required:
        - add
      properties:
        add:
          nullable: false
          oneOf:
            -
              type: boolean
            -
              type: array
              items:
                $ref: '#/components/schemas/UsersAccessServiceRestrictedAccessV2'
      type: object
    UserScope:
      title: 'User scope'
      description: "Possible values:\n- `manageAbsences`: ManageAbsences\n- `viewAbsences`: ViewAbsences\n- `viewUserReports`: ViewUserReports\n- `viewUserReportsDetailed`: ViewUserReportsDetailed\n- `viewPresences`: ViewPresences"
      type: string
      enum:
        - manageAbsences
        - viewAbsences
        - viewUserReports
        - viewUserReportsDetailed
        - viewPresences
      nullable: false
      x-enumNames:
        - ManageAbsences
        - ViewAbsences
        - ViewUserReports
        - ViewUserReportsDetailed
        - ViewPresences
    UsersExceedAccessGroupLimitError:
      title: 'Users exceed access group limit error'
      properties:
        type:
          type: string
          example: UsersExceedAccessGroupLimit
        message:
          type: string
          example: 'Users are exceeding the access group limit.'
          nullable: true
        path:
          type: string
          nullable: true
        details:
          $ref: '#/components/schemas/UsersExceedAccessGroupLimit'
      type: object
    UsersExceedAccessGroupLimit:
      title: 'Users exceeding access group limit error details'
      required:
        - limit
        - users_ids
      properties:
        limit:
          description: 'The limit of access groups per user'
          type: integer
          format: int64
          example: 30
        users_ids:
          description: 'One or more ids of users exceeding the access group limit'
          type: array
          items:
            type: integer
          example:
            - 99999
      type: object
    UsersNonbusinessDayV2:
      required:
        - users_id
        - days
      properties:
        users_id:
          type: integer
          format: int64
          example: 10
        days:
          description: 'Nonbusiness days that apply for the user in the queried time span'
          type: array
          items:
            $ref: '#/components/schemas/NonbusinessDayV2'
      type: object
    UsersNonbusinessGroupsCollisionError:
      title: 'Users nonbusiness groups collision error'
      properties:
        type:
          type: string
          example: UsersNonbusinessGroupsCollision
        message:
          type: string
          nullable: true
        path:
          type: string
          nullable: true
        details:
          example: null
          nullable: true
      type: object
    UsersNonbusinessGroupV3:
      required:
        - id
        - date_since
        - date_until
        - nonbusiness_groups_id
        - users_id
      properties:
        id:
          type: integer
          format: int64
          example: 10
        date_since:
          type: string
          format: date
          example: '2025-01-31'
        date_until:
          type: string
          format: date
          example: '2025-01-31'
          nullable: true
        nonbusiness_groups_id:
          type: integer
          format: int64
          example: 10
          nullable: true
        users_id:
          type: integer
          format: int64
          example: 10
      type: object
    UserV1:
      required:
        - id
        - name
        - weekstart_monday
        - weekend_friday
        - active
        - timeformat_12h
        - language
        - timezone
        - teams_id
        - initials
        - nonbusinessgroups_id
      properties:
        id:
          type: integer
          format: int64
          nullable: false
        name:
          type: string
          nullable: true
        number:
          type: string
          nullable: true
        email:
          type: string
          nullable: false
        role:
          $ref: '#/components/schemas/Role'
        active:
          type: boolean
          nullable: false
        timeformat_12h:
          type: boolean
          nullable: false
        weekstart_monday:
          type: boolean
          nullable: true
        weekend_friday:
          type: boolean
          nullable: true
        language:
          $ref: '#/components/schemas/Language'
        timezone:
          type: string
          nullable: false
        wage_type:
          oneOf:
            -
              $ref: '#/components/schemas/WageType'
          nullable: true
        can_generally_see_absences:
          type: boolean
          nullable: false
        can_generally_manage_absences:
          type: boolean
          nullable: false
        can_add_customers:
          type: boolean
          nullable: false
        worktime_regulation_id:
          type: integer
          format: int64
          nullable: true
        teams_id:
          type: integer
          format: int64
          nullable: true
        initials:
          type: string
          nullable: true
        nonbusinessgroups_id:
          type: integer
          format: int64
          nullable: true
        boss:
          type: integer
          format: int64
          nullable: true
        absence_managers_id:
          type: array
          items:
            $ref: '#/components/schemas/AggregatesUsersMeTypedPropertyAbsenceManagerIdV2'
          nullable: false
        default_holidays_count:
          type: boolean
          nullable: false
        default_target_hours:
          type: boolean
          nullable: false
        edit_lock:
          type: string
          nullable: true
        edit_lock_dyn:
          oneOf:
            -
              $ref: '#/components/schemas/EditLockDay'
          nullable: true
        edit_lock_sync:
          type: boolean
          nullable: true
        work_time_edit_lock_days:
          oneOf:
            -
              $ref: '#/components/schemas/WorkTimeEditLockDay'
          nullable: true
        creator:
          type: integer
          format: int64
          nullable: true
        support_pin:
          type: string
          nullable: false
      type: object
    WageType:
      title: 'Wage type'
      description: "Possible values:\n- `0`: All\n- `1`: Salary\n- `2`: HourlyWage"
      type: integer
      enum:
        - 0
        - 1
        - 2
      nullable: false
      x-enumNames:
        - All
        - Salary
        - HourlyWage
    WorkTimeEditLockDay:
      title: 'Work time edit lock day'
      description: "Possible values:\n- `0`: LockDays0\n- `1`: LockDays1\n- `2`: LockDays2\n- `3`: LockDays3\n- `5`: LockDays5\n- `8`: LockDays8\n- `15`: LockDays15\n- `31`: LockDays31\n- `46`: LockDays46\n- `91`: LockDays91"
      type: integer
      enum:
        - 0
        - 1
        - 2
        - 3
        - 5
        - 8
        - 15
        - 31
        - 46
        - 91
      nullable: false
      x-enumNames:
        - LockDays0
        - LockDays1
        - LockDays2
        - LockDays3
        - LockDays5
        - LockDays8
        - LockDays15
        - LockDays31
        - LockDays46
        - LockDays91
    WorkTimeIntervalV2:
      required:
        - time_since
        - time_until
      properties:
        time_since:
          type: string
          format: date-time
          nullable: false
        time_until:
          type: string
          format: date-time
          nullable: true
      type: object
    WorkTimeRegulationV3:
      required:
        - id
        - add_to_worktime
        - daily_max
        - weekly_max
        - interval_max
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          description: '[OPTIONAL] Only visible for owners or managers with HR rights'
          type: string
          example: Germany
        add_to_worktime:
          type: boolean
          example: false
        daily_max:
          type: number
          format: float
          example: 10
        weekly_max:
          type: number
          format: float
          example: 60
        interval_max:
          type: number
          format: float
          example: 6
      type: object
    WorkTimesChangeRequestChangeV2:
      required:
        - type
        - time_since
        - time_until
      properties:
        type:
          $ref: '#/components/schemas/ChangeRequestIntervalType'
        time_since:
          type: string
          format: date-time
          nullable: false
        time_until:
          type: string
          format: date-time
          nullable: true
      type: object
    WorkTimesChangeRequestPostV2:
      required:
        - change_request
        - replaced_change_request
        - approved_immediately
      properties:
        change_request:
          oneOf:
            -
              $ref: '#/components/schemas/WorkTimesChangeRequestV2'
          nullable: true
        approved_immediately:
          type: boolean
          nullable: false
      type: object
    WorkTimesChangeRequestsDeclineChangeV2:
      required:
        - type
        - time_since
        - time_until
      properties:
        type:
          $ref: '#/components/schemas/ChangeRequestIntervalType'
        time_since:
          type: string
          nullable: false
        time_until:
          type: string
          nullable: true
      type: object
    WorkTimesChangeRequestsDeclineV2:
      required:
        - id
        - date
        - users_id
        - status
        - created_at
        - declined_at
        - declined_by
        - changes
      properties:
        id:
          type: integer
          format: int64
          nullable: false
        date:
          type: string
          nullable: false
        users_id:
          type: integer
          format: int64
          nullable: false
        status:
          $ref: '#/components/schemas/ChangeRequestStatus'
        created_at:
          type: string
          nullable: true
        declined_at:
          type: string
          nullable: true
        declined_by:
          type: integer
          format: int64
          nullable: true
        changes:
          type: array
          items:
            $ref: '#/components/schemas/WorkTimesChangeRequestsDeclineChangeV2'
          nullable: false
      type: object
    WorkTimesChangeRequestV2:
      required:
        - id
        - date
        - users_id
        - status
        - created_at
        - declined_at
        - declined_by
        - changes
      properties:
        id:
          type: integer
          format: int64
          nullable: false
        date:
          type: string
          format: date
          nullable: false
        users_id:
          type: integer
          format: int64
          nullable: false
        status:
          $ref: '#/components/schemas/ChangeRequestStatus'
        created_at:
          type: string
          format: date-time
          nullable: false
        declined_at:
          type: string
          format: date-time
          nullable: true
        declined_by:
          title: 'ID of the user who declined the change request'
          type: integer
          format: int64
          nullable: true
        changes:
          type: array
          items:
            $ref: '#/components/schemas/WorkTimesChangeRequestChangeV2'
          nullable: false
      type: object
    WorkTimeV2:
      required:
        - date
        - users_id
        - offset
        - intervals
      properties:
        date:
          type: string
          format: date
          nullable: false
        users_id:
          type: integer
          format: int64
          nullable: false
        offset:
          title: "Additional work time that does not result form the day's intervals"
          description: 'Only possible for days before 2023-01-01; can be positive or negative.'
          type: integer
          format: int64
          nullable: false
        intervals:
          type: array
          items:
            $ref: '#/components/schemas/WorkTimeIntervalV2'
          nullable: false
      type: object
  securitySchemes:
    BasicAuth:
      type: http
      description: 'The basic authentication of the HTTP protocol. Credentials are email address and API key.<br />Every co-worker will find his API key in the menu item "Personal data" in his Clockodo account.'
      scheme: basic
    User:
      type: apiKey
      description: 'Must be filled together with <code>X-ClockodoApiKey</code><br /><strong>Example: admin@clockodo.com</strong>'
      name: X-ClockodoApiUser
      in: header
    Key:
      type: apiKey
      description: 'Must be filled together with <code>X-ClockodoApiUser</code>'
      name: X-ClockodoApiKey
      in: header
    ExternalApp:
      type: apiKey
      description: 'Every request to our API must provide identification of the calling application, including the email address of a technical contact person.<br /><strong>Example: "Clockodo;admin@clockodo.com"</strong>'
      name: X-Clockodo-External-Application
      in: header
security:
  -
    BasicAuth: []
    ExternalApp: []
  -
    User: []
    Key: []
    ExternalApp: []
tags:
  -
    name: Absence
    description: 'Manage absences (holidays, sick days, etc.)'
  -
    name: AccessGroup
    description: 'Manage access groups names and assigned users'
  -
    name: AccessGroupAccess
    description: 'Manage access group rights'
  -
    name: AggregatesUsersMe
    description: 'Get extensive user data, including company and worktime regulation'
  -
    name: Clock
    description: 'Control the clock'
  -
    name: Customer
    description: 'Manage customers'
  -
    name: Entry
    description: 'Manage time and lump sum entries'
  -
    name: EntryGroup
    description: 'Query and manage groups of time entries (particularly useful for evaluation and invoicing purposes)'
  -
    name: EntryText
    description: 'Query descriptions of time and lump sum entries'
  -
    name: HolidayCarryover
    description: 'Manage holiday carryovers'
  -
    name: HolidayQuota
    description: 'Manage holiday quotas'
  -
    name: IndividualUserAccess
    description: 'Manage individual user rights'
  -
    name: LumpSumService
    description: 'Manage lump sum services'
  -
    name: NonbusinessDay
    description: 'Query and manage nonbusiness days'
  -
    name: NonbusinessGroup
    description: 'Query and manage nonbusiness groups'
  -
    name: OvertimeCarry
    description: 'Manage overtime carryovers'
  -
    name: OvertimeReduction
    description: 'Manage overtime reductions'
  -
    name: Project
    description: 'Manage projects'
  -
    name: ProjectReport
    description: 'Query projects'
  -
    name: Register
    description: 'Create Clockodo accounts'
  -
    name: Service
    description: 'Manage services'
  -
    name: Subproject
    description: 'Manage subprojects'
  -
    name: TargetHour
    description: 'Manage target hours (planned hours)'
  -
    name: Team
    description: 'Manage teams'
  -
    name: User
    description: 'Manage co-workers'
  -
    name: UserNonbusinessDay
    description: 'Get non-business days of user'
  -
    name: UserNonbusinessGroup
    description: 'Assign non-business day groups to users and manage time periods'
  -
    name: UserReport
    description: 'Query user reports (e. g. working time evaluation of each day and holiday account of each co-worker)'
  -
    name: WorkTime
    description: 'Manage work times. Work times cannot be edited directly. To edit work times, edit the respective time entries or use requests for change of work time.'
